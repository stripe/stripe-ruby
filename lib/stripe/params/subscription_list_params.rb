# File generated from our OpenAPI spec
# frozen_string_literal: true

module Stripe
  class SubscriptionListParams < Stripe::RequestParams
    class AutomaticTax < Stripe::RequestParams
      # Enabled automatic tax calculation which will automatically compute tax rates on all invoices generated by the subscription.
      attr_accessor :enabled

      def initialize(enabled: nil)
        @enabled = enabled
      end
    end

    class Created < Stripe::RequestParams
      # Minimum value to filter by (exclusive)
      attr_accessor :gt
      # Minimum value to filter by (inclusive)
      attr_accessor :gte
      # Maximum value to filter by (exclusive)
      attr_accessor :lt
      # Maximum value to filter by (inclusive)
      attr_accessor :lte

      def initialize(gt: nil, gte: nil, lt: nil, lte: nil)
        @gt = gt
        @gte = gte
        @lt = lt
        @lte = lte
      end
    end

    class CurrentPeriodEnd < Stripe::RequestParams
      # Minimum value to filter by (exclusive)
      attr_accessor :gt
      # Minimum value to filter by (inclusive)
      attr_accessor :gte
      # Maximum value to filter by (exclusive)
      attr_accessor :lt
      # Maximum value to filter by (inclusive)
      attr_accessor :lte

      def initialize(gt: nil, gte: nil, lt: nil, lte: nil)
        @gt = gt
        @gte = gte
        @lt = lt
        @lte = lte
      end
    end

    class CurrentPeriodStart < Stripe::RequestParams
      # Minimum value to filter by (exclusive)
      attr_accessor :gt
      # Minimum value to filter by (inclusive)
      attr_accessor :gte
      # Maximum value to filter by (exclusive)
      attr_accessor :lt
      # Maximum value to filter by (inclusive)
      attr_accessor :lte

      def initialize(gt: nil, gte: nil, lt: nil, lte: nil)
        @gt = gt
        @gte = gte
        @lt = lt
        @lte = lte
      end
    end
    # Filter subscriptions by their automatic tax settings.
    attr_accessor :automatic_tax
    # The collection method of the subscriptions to retrieve. Either `charge_automatically` or `send_invoice`.
    attr_accessor :collection_method
    # Only return subscriptions that were created during the given date interval.
    attr_accessor :created
    # Only return subscriptions whose minimum item current_period_end falls within the given date interval.
    attr_accessor :current_period_end
    # Only return subscriptions whose maximum item current_period_start falls within the given date interval.
    attr_accessor :current_period_start
    # The ID of the customer whose subscriptions will be retrieved.
    attr_accessor :customer
    # A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
    attr_accessor :ending_before
    # Specifies which fields in the response should be expanded.
    attr_accessor :expand
    # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
    attr_accessor :limit
    # The ID of the plan whose subscriptions will be retrieved.
    attr_accessor :plan
    # Filter for subscriptions that contain this recurring price ID.
    attr_accessor :price
    # A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
    attr_accessor :starting_after
    # The status of the subscriptions to retrieve. Passing in a value of `canceled` will return all canceled subscriptions, including those belonging to deleted customers. Pass `ended` to find subscriptions that are canceled and subscriptions that are expired due to [incomplete payment](https://stripe.com/docs/billing/subscriptions/overview#subscription-statuses). Passing in a value of `all` will return subscriptions of all statuses. If no value is supplied, all subscriptions that have not been canceled are returned.
    attr_accessor :status
    # Filter for subscriptions that are associated with the specified test clock. The response will not include subscriptions with test clocks if this and the customer parameter is not set.
    attr_accessor :test_clock

    def initialize(
      automatic_tax: nil,
      collection_method: nil,
      created: nil,
      current_period_end: nil,
      current_period_start: nil,
      customer: nil,
      ending_before: nil,
      expand: nil,
      limit: nil,
      plan: nil,
      price: nil,
      starting_after: nil,
      status: nil,
      test_clock: nil
    )
      @automatic_tax = automatic_tax
      @collection_method = collection_method
      @created = created
      @current_period_end = current_period_end
      @current_period_start = current_period_start
      @customer = customer
      @ending_before = ending_before
      @expand = expand
      @limit = limit
      @plan = plan
      @price = price
      @starting_after = starting_after
      @status = status
      @test_clock = test_clock
    end
  end
end
