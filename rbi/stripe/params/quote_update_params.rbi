# File generated from our OpenAPI spec
# frozen_string_literal: true

# typed: true
module Stripe
  class QuoteUpdateParams < Stripe::RequestParams
    class AutomaticTax < Stripe::RequestParams
      class Liability < Stripe::RequestParams
        # The connected account being referenced when `type` is `account`.
        sig { returns(T.nilable(String)) }
        def account; end
        sig { params(_account: T.nilable(String)).returns(T.nilable(String)) }
        def account=(_account); end
        # Type of the account referenced in the request.
        sig { returns(String) }
        def type; end
        sig { params(_type: String).returns(String) }
        def type=(_type); end
        sig { params(account: T.nilable(String), type: String).void }
        def initialize(account: nil, type: nil); end
      end
      # Controls whether Stripe will automatically compute tax on the resulting invoices or subscriptions as well as the quote itself.
      sig { returns(T::Boolean) }
      def enabled; end
      sig { params(_enabled: T::Boolean).returns(T::Boolean) }
      def enabled=(_enabled); end
      # The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
      sig { returns(T.nilable(QuoteUpdateParams::AutomaticTax::Liability)) }
      def liability; end
      sig {
        params(_liability: T.nilable(QuoteUpdateParams::AutomaticTax::Liability)).returns(T.nilable(QuoteUpdateParams::AutomaticTax::Liability))
       }
      def liability=(_liability); end
      sig {
        params(enabled: T::Boolean, liability: T.nilable(QuoteUpdateParams::AutomaticTax::Liability)).void
       }
      def initialize(enabled: nil, liability: nil); end
    end
    class Discount < Stripe::RequestParams
      # ID of the coupon to create a new discount for.
      sig { returns(T.nilable(String)) }
      def coupon; end
      sig { params(_coupon: T.nilable(String)).returns(T.nilable(String)) }
      def coupon=(_coupon); end
      # ID of an existing discount on the object (or one of its ancestors) to reuse.
      sig { returns(T.nilable(String)) }
      def discount; end
      sig { params(_discount: T.nilable(String)).returns(T.nilable(String)) }
      def discount=(_discount); end
      # ID of the promotion code to create a new discount for.
      sig { returns(T.nilable(String)) }
      def promotion_code; end
      sig { params(_promotion_code: T.nilable(String)).returns(T.nilable(String)) }
      def promotion_code=(_promotion_code); end
      sig {
        params(coupon: T.nilable(String), discount: T.nilable(String), promotion_code: T.nilable(String)).void
       }
      def initialize(coupon: nil, discount: nil, promotion_code: nil); end
    end
    class InvoiceSettings < Stripe::RequestParams
      class Issuer < Stripe::RequestParams
        # The connected account being referenced when `type` is `account`.
        sig { returns(T.nilable(String)) }
        def account; end
        sig { params(_account: T.nilable(String)).returns(T.nilable(String)) }
        def account=(_account); end
        # Type of the account referenced in the request.
        sig { returns(String) }
        def type; end
        sig { params(_type: String).returns(String) }
        def type=(_type); end
        sig { params(account: T.nilable(String), type: String).void }
        def initialize(account: nil, type: nil); end
      end
      # Number of days within which a customer must pay the invoice generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`.
      sig { returns(T.nilable(Integer)) }
      def days_until_due; end
      sig { params(_days_until_due: T.nilable(Integer)).returns(T.nilable(Integer)) }
      def days_until_due=(_days_until_due); end
      # The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
      sig { returns(T.nilable(QuoteUpdateParams::InvoiceSettings::Issuer)) }
      def issuer; end
      sig {
        params(_issuer: T.nilable(QuoteUpdateParams::InvoiceSettings::Issuer)).returns(T.nilable(QuoteUpdateParams::InvoiceSettings::Issuer))
       }
      def issuer=(_issuer); end
      sig {
        params(days_until_due: T.nilable(Integer), issuer: T.nilable(QuoteUpdateParams::InvoiceSettings::Issuer)).void
       }
      def initialize(days_until_due: nil, issuer: nil); end
    end
    class LineItem < Stripe::RequestParams
      class Discount < Stripe::RequestParams
        # ID of the coupon to create a new discount for.
        sig { returns(T.nilable(String)) }
        def coupon; end
        sig { params(_coupon: T.nilable(String)).returns(T.nilable(String)) }
        def coupon=(_coupon); end
        # ID of an existing discount on the object (or one of its ancestors) to reuse.
        sig { returns(T.nilable(String)) }
        def discount; end
        sig { params(_discount: T.nilable(String)).returns(T.nilable(String)) }
        def discount=(_discount); end
        # ID of the promotion code to create a new discount for.
        sig { returns(T.nilable(String)) }
        def promotion_code; end
        sig { params(_promotion_code: T.nilable(String)).returns(T.nilable(String)) }
        def promotion_code=(_promotion_code); end
        sig {
          params(coupon: T.nilable(String), discount: T.nilable(String), promotion_code: T.nilable(String)).void
         }
        def initialize(coupon: nil, discount: nil, promotion_code: nil); end
      end
      class PriceData < Stripe::RequestParams
        class Recurring < Stripe::RequestParams
          # Specifies billing frequency. Either `day`, `week`, `month` or `year`.
          sig { returns(String) }
          def interval; end
          sig { params(_interval: String).returns(String) }
          def interval=(_interval); end
          # The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of three years interval allowed (3 years, 36 months, or 156 weeks).
          sig { returns(T.nilable(Integer)) }
          def interval_count; end
          sig { params(_interval_count: T.nilable(Integer)).returns(T.nilable(Integer)) }
          def interval_count=(_interval_count); end
          sig { params(interval: String, interval_count: T.nilable(Integer)).void }
          def initialize(interval: nil, interval_count: nil); end
        end
        # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        sig { returns(String) }
        def currency; end
        sig { params(_currency: String).returns(String) }
        def currency=(_currency); end
        # The ID of the [Product](https://docs.stripe.com/api/products) that this [Price](https://docs.stripe.com/api/prices) will belong to.
        sig { returns(String) }
        def product; end
        sig { params(_product: String).returns(String) }
        def product=(_product); end
        # The recurring components of a price such as `interval` and `interval_count`.
        sig { returns(T.nilable(QuoteUpdateParams::LineItem::PriceData::Recurring)) }
        def recurring; end
        sig {
          params(_recurring: T.nilable(QuoteUpdateParams::LineItem::PriceData::Recurring)).returns(T.nilable(QuoteUpdateParams::LineItem::PriceData::Recurring))
         }
        def recurring=(_recurring); end
        # Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
        sig { returns(T.nilable(String)) }
        def tax_behavior; end
        sig { params(_tax_behavior: T.nilable(String)).returns(T.nilable(String)) }
        def tax_behavior=(_tax_behavior); end
        # A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
        sig { returns(T.nilable(Integer)) }
        def unit_amount; end
        sig { params(_unit_amount: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def unit_amount=(_unit_amount); end
        # Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
        sig { returns(T.nilable(String)) }
        def unit_amount_decimal; end
        sig { params(_unit_amount_decimal: T.nilable(String)).returns(T.nilable(String)) }
        def unit_amount_decimal=(_unit_amount_decimal); end
        sig {
          params(currency: String, product: String, recurring: T.nilable(QuoteUpdateParams::LineItem::PriceData::Recurring), tax_behavior: T.nilable(String), unit_amount: T.nilable(Integer), unit_amount_decimal: T.nilable(String)).void
         }
        def initialize(
          currency: nil,
          product: nil,
          recurring: nil,
          tax_behavior: nil,
          unit_amount: nil,
          unit_amount_decimal: nil
        ); end
      end
      # The discounts applied to this line item.
      sig { returns(T.nilable(T.any(String, T::Array[QuoteUpdateParams::LineItem::Discount]))) }
      def discounts; end
      sig {
        params(_discounts: T.nilable(T.any(String, T::Array[QuoteUpdateParams::LineItem::Discount]))).returns(T.nilable(T.any(String, T::Array[QuoteUpdateParams::LineItem::Discount])))
       }
      def discounts=(_discounts); end
      # The ID of an existing line item on the quote.
      sig { returns(T.nilable(String)) }
      def id; end
      sig { params(_id: T.nilable(String)).returns(T.nilable(String)) }
      def id=(_id); end
      # The ID of the price object. One of `price` or `price_data` is required.
      sig { returns(T.nilable(String)) }
      def price; end
      sig { params(_price: T.nilable(String)).returns(T.nilable(String)) }
      def price=(_price); end
      # Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. One of `price` or `price_data` is required.
      sig { returns(T.nilable(QuoteUpdateParams::LineItem::PriceData)) }
      def price_data; end
      sig {
        params(_price_data: T.nilable(QuoteUpdateParams::LineItem::PriceData)).returns(T.nilable(QuoteUpdateParams::LineItem::PriceData))
       }
      def price_data=(_price_data); end
      # The quantity of the line item.
      sig { returns(T.nilable(Integer)) }
      def quantity; end
      sig { params(_quantity: T.nilable(Integer)).returns(T.nilable(Integer)) }
      def quantity=(_quantity); end
      # The tax rates which apply to the line item. When set, the `default_tax_rates` on the quote do not apply to this line item.
      sig { returns(T.nilable(T.any(String, T::Array[String]))) }
      def tax_rates; end
      sig {
        params(_tax_rates: T.nilable(T.any(String, T::Array[String]))).returns(T.nilable(T.any(String, T::Array[String])))
       }
      def tax_rates=(_tax_rates); end
      sig {
        params(discounts: T.nilable(T.any(String, T::Array[QuoteUpdateParams::LineItem::Discount])), id: T.nilable(String), price: T.nilable(String), price_data: T.nilable(QuoteUpdateParams::LineItem::PriceData), quantity: T.nilable(Integer), tax_rates: T.nilable(T.any(String, T::Array[String]))).void
       }
      def initialize(
        discounts: nil,
        id: nil,
        price: nil,
        price_data: nil,
        quantity: nil,
        tax_rates: nil
      ); end
    end
    class SubscriptionData < Stripe::RequestParams
      # The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
      sig { returns(T.nilable(String)) }
      def description; end
      sig { params(_description: T.nilable(String)).returns(T.nilable(String)) }
      def description=(_description); end
      # When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. The `effective_date` is ignored if it is in the past when the quote is accepted.
      sig { returns(T.nilable(T.any(String, T.any(String, Integer)))) }
      def effective_date; end
      sig {
        params(_effective_date: T.nilable(T.any(String, T.any(String, Integer)))).returns(T.nilable(T.any(String, T.any(String, Integer))))
       }
      def effective_date=(_effective_date); end
      # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on the subscription or subscription schedule when the quote is accepted. If a recurring price is included in `line_items`, this field will be passed to the resulting subscription's `metadata` field. If `subscription_data.effective_date` is used, this field will be passed to the resulting subscription schedule's `phases.metadata` field. Unlike object-level metadata, this field is declarative. Updates will clear prior values.
      sig { returns(T.nilable(T::Hash[String, String])) }
      def metadata; end
      sig {
        params(_metadata: T.nilable(T::Hash[String, String])).returns(T.nilable(T::Hash[String, String]))
       }
      def metadata=(_metadata); end
      # Integer representing the number of trial period days before the customer is charged for the first time.
      sig { returns(T.nilable(T.any(String, Integer))) }
      def trial_period_days; end
      sig {
        params(_trial_period_days: T.nilable(T.any(String, Integer))).returns(T.nilable(T.any(String, Integer)))
       }
      def trial_period_days=(_trial_period_days); end
      sig {
        params(description: T.nilable(String), effective_date: T.nilable(T.any(String, T.any(String, Integer))), metadata: T.nilable(T::Hash[String, String]), trial_period_days: T.nilable(T.any(String, Integer))).void
       }
      def initialize(
        description: nil,
        effective_date: nil,
        metadata: nil,
        trial_period_days: nil
      ); end
    end
    class TransferData < Stripe::RequestParams
      # The amount that will be transferred automatically when the invoice is paid. If no amount is set, the full amount is transferred. There cannot be any line items with recurring prices when using this field.
      sig { returns(T.nilable(Integer)) }
      def amount; end
      sig { params(_amount: T.nilable(Integer)).returns(T.nilable(Integer)) }
      def amount=(_amount); end
      # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination. There must be at least 1 line item with a recurring price to use this field.
      sig { returns(T.nilable(Float)) }
      def amount_percent; end
      sig { params(_amount_percent: T.nilable(Float)).returns(T.nilable(Float)) }
      def amount_percent=(_amount_percent); end
      # ID of an existing, connected Stripe account.
      sig { returns(String) }
      def destination; end
      sig { params(_destination: String).returns(String) }
      def destination=(_destination); end
      sig {
        params(amount: T.nilable(Integer), amount_percent: T.nilable(Float), destination: String).void
       }
      def initialize(amount: nil, amount_percent: nil, destination: nil); end
    end
    # The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. There cannot be any line items with recurring prices when using this field.
    sig { returns(T.nilable(T.any(String, Integer))) }
    def application_fee_amount; end
    sig {
      params(_application_fee_amount: T.nilable(T.any(String, Integer))).returns(T.nilable(T.any(String, Integer)))
     }
    def application_fee_amount=(_application_fee_amount); end
    # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field.
    sig { returns(T.nilable(T.any(String, Float))) }
    def application_fee_percent; end
    sig {
      params(_application_fee_percent: T.nilable(T.any(String, Float))).returns(T.nilable(T.any(String, Float)))
     }
    def application_fee_percent=(_application_fee_percent); end
    # Settings for automatic tax lookup for this quote and resulting invoices and subscriptions.
    sig { returns(T.nilable(QuoteUpdateParams::AutomaticTax)) }
    def automatic_tax; end
    sig {
      params(_automatic_tax: T.nilable(QuoteUpdateParams::AutomaticTax)).returns(T.nilable(QuoteUpdateParams::AutomaticTax))
     }
    def automatic_tax=(_automatic_tax); end
    # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
    sig { returns(T.nilable(String)) }
    def collection_method; end
    sig { params(_collection_method: T.nilable(String)).returns(T.nilable(String)) }
    def collection_method=(_collection_method); end
    # The customer for which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
    sig { returns(T.nilable(String)) }
    def customer; end
    sig { params(_customer: T.nilable(String)).returns(T.nilable(String)) }
    def customer=(_customer); end
    # The tax rates that will apply to any line item that does not have `tax_rates` set.
    sig { returns(T.nilable(T.any(String, T::Array[String]))) }
    def default_tax_rates; end
    sig {
      params(_default_tax_rates: T.nilable(T.any(String, T::Array[String]))).returns(T.nilable(T.any(String, T::Array[String])))
     }
    def default_tax_rates=(_default_tax_rates); end
    # A description that will be displayed on the quote PDF.
    sig { returns(T.nilable(String)) }
    def description; end
    sig { params(_description: T.nilable(String)).returns(T.nilable(String)) }
    def description=(_description); end
    # The discounts applied to the quote.
    sig { returns(T.nilable(T.any(String, T::Array[QuoteUpdateParams::Discount]))) }
    def discounts; end
    sig {
      params(_discounts: T.nilable(T.any(String, T::Array[QuoteUpdateParams::Discount]))).returns(T.nilable(T.any(String, T::Array[QuoteUpdateParams::Discount])))
     }
    def discounts=(_discounts); end
    # Specifies which fields in the response should be expanded.
    sig { returns(T.nilable(T::Array[String])) }
    def expand; end
    sig { params(_expand: T.nilable(T::Array[String])).returns(T.nilable(T::Array[String])) }
    def expand=(_expand); end
    # A future timestamp on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
    sig { returns(T.nilable(Integer)) }
    def expires_at; end
    sig { params(_expires_at: T.nilable(Integer)).returns(T.nilable(Integer)) }
    def expires_at=(_expires_at); end
    # A footer that will be displayed on the quote PDF.
    sig { returns(T.nilable(String)) }
    def footer; end
    sig { params(_footer: T.nilable(String)).returns(T.nilable(String)) }
    def footer=(_footer); end
    # A header that will be displayed on the quote PDF.
    sig { returns(T.nilable(String)) }
    def header; end
    sig { params(_header: T.nilable(String)).returns(T.nilable(String)) }
    def header=(_header); end
    # All invoices will be billed using the specified settings.
    sig { returns(T.nilable(QuoteUpdateParams::InvoiceSettings)) }
    def invoice_settings; end
    sig {
      params(_invoice_settings: T.nilable(QuoteUpdateParams::InvoiceSettings)).returns(T.nilable(QuoteUpdateParams::InvoiceSettings))
     }
    def invoice_settings=(_invoice_settings); end
    # A list of line items the customer is being quoted for. Each line item includes information about the product, the quantity, and the resulting cost.
    sig { returns(T.nilable(T::Array[QuoteUpdateParams::LineItem])) }
    def line_items; end
    sig {
      params(_line_items: T.nilable(T::Array[QuoteUpdateParams::LineItem])).returns(T.nilable(T::Array[QuoteUpdateParams::LineItem]))
     }
    def line_items=(_line_items); end
    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
    sig { returns(T.nilable(T::Hash[String, String])) }
    def metadata; end
    sig {
      params(_metadata: T.nilable(T::Hash[String, String])).returns(T.nilable(T::Hash[String, String]))
     }
    def metadata=(_metadata); end
    # The account on behalf of which to charge.
    sig { returns(T.nilable(String)) }
    def on_behalf_of; end
    sig { params(_on_behalf_of: T.nilable(String)).returns(T.nilable(String)) }
    def on_behalf_of=(_on_behalf_of); end
    # When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created.
    sig { returns(T.nilable(QuoteUpdateParams::SubscriptionData)) }
    def subscription_data; end
    sig {
      params(_subscription_data: T.nilable(QuoteUpdateParams::SubscriptionData)).returns(T.nilable(QuoteUpdateParams::SubscriptionData))
     }
    def subscription_data=(_subscription_data); end
    # The data with which to automatically create a Transfer for each of the invoices.
    sig { returns(T.nilable(T.any(String, QuoteUpdateParams::TransferData))) }
    def transfer_data; end
    sig {
      params(_transfer_data: T.nilable(T.any(String, QuoteUpdateParams::TransferData))).returns(T.nilable(T.any(String, QuoteUpdateParams::TransferData)))
     }
    def transfer_data=(_transfer_data); end
    sig {
      params(application_fee_amount: T.nilable(T.any(String, Integer)), application_fee_percent: T.nilable(T.any(String, Float)), automatic_tax: T.nilable(QuoteUpdateParams::AutomaticTax), collection_method: T.nilable(String), customer: T.nilable(String), default_tax_rates: T.nilable(T.any(String, T::Array[String])), description: T.nilable(String), discounts: T.nilable(T.any(String, T::Array[QuoteUpdateParams::Discount])), expand: T.nilable(T::Array[String]), expires_at: T.nilable(Integer), footer: T.nilable(String), header: T.nilable(String), invoice_settings: T.nilable(QuoteUpdateParams::InvoiceSettings), line_items: T.nilable(T::Array[QuoteUpdateParams::LineItem]), metadata: T.nilable(T::Hash[String, String]), on_behalf_of: T.nilable(String), subscription_data: T.nilable(QuoteUpdateParams::SubscriptionData), transfer_data: T.nilable(T.any(String, QuoteUpdateParams::TransferData))).void
     }
    def initialize(
      application_fee_amount: nil,
      application_fee_percent: nil,
      automatic_tax: nil,
      collection_method: nil,
      customer: nil,
      default_tax_rates: nil,
      description: nil,
      discounts: nil,
      expand: nil,
      expires_at: nil,
      footer: nil,
      header: nil,
      invoice_settings: nil,
      line_items: nil,
      metadata: nil,
      on_behalf_of: nil,
      subscription_data: nil,
      transfer_data: nil
    ); end
  end
end