# File generated from our OpenAPI spec
# frozen_string_literal: true

# typed: true
module Stripe
  # A SetupAttempt describes one attempted confirmation of a SetupIntent,
  # whether that confirmation is successful or unsuccessful. You can use
  # SetupAttempts to inspect details of a specific attempt at setting up a
  # payment method using a SetupIntent.
  class SetupAttempt < APIResource
    class PaymentMethodDetails < Stripe::StripeObject
      class AcssDebit < Stripe::StripeObject; end
      class AmazonPay < Stripe::StripeObject; end
      class AuBecsDebit < Stripe::StripeObject; end
      class BacsDebit < Stripe::StripeObject; end
      class Bancontact < Stripe::StripeObject
        # Bank code of bank associated with the bank account.
        sig { returns(T.nilable(String)) }
        def bank_code; end
        # Name of the bank associated with the bank account.
        sig { returns(T.nilable(String)) }
        def bank_name; end
        # Bank Identifier Code of the bank associated with the bank account.
        sig { returns(T.nilable(String)) }
        def bic; end
        # The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
        sig { returns(T.nilable(T.any(String, Stripe::PaymentMethod))) }
        def generated_sepa_debit; end
        # The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
        sig { returns(T.nilable(T.any(String, Stripe::Mandate))) }
        def generated_sepa_debit_mandate; end
        # Last four characters of the IBAN.
        sig { returns(T.nilable(String)) }
        def iban_last4; end
        # Preferred language of the Bancontact authorization page that the customer is redirected to.
        # Can be one of `en`, `de`, `fr`, or `nl`
        sig { returns(T.nilable(String)) }
        def preferred_language; end
        # Owner's verified full name. Values are verified or provided by Bancontact directly
        # (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        sig { returns(T.nilable(String)) }
        def verified_name; end
      end
      class Boleto < Stripe::StripeObject; end
      class Card < Stripe::StripeObject
        class Checks < Stripe::StripeObject
          # If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
          sig { returns(T.nilable(String)) }
          def address_line1_check; end
          # If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
          sig { returns(T.nilable(String)) }
          def address_postal_code_check; end
          # If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
          sig { returns(T.nilable(String)) }
          def cvc_check; end
        end
        class ThreeDSecure < Stripe::StripeObject
          # For authenticated transactions: how the customer was authenticated by
          # the issuing bank.
          sig { returns(T.nilable(String)) }
          def authentication_flow; end
          # The Electronic Commerce Indicator (ECI). A protocol-level field
          # indicating what degree of authentication was performed.
          sig { returns(T.nilable(String)) }
          def electronic_commerce_indicator; end
          # Indicates the outcome of 3D Secure authentication.
          sig { returns(T.nilable(String)) }
          def result; end
          # Additional information about why 3D Secure succeeded or failed based
          # on the `result`.
          sig { returns(T.nilable(String)) }
          def result_reason; end
          # The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID
          # (dsTransId) for this payment.
          sig { returns(T.nilable(String)) }
          def transaction_id; end
          # The version of 3D Secure that was used.
          sig { returns(T.nilable(String)) }
          def version; end
        end
        class Wallet < Stripe::StripeObject
          class ApplePay < Stripe::StripeObject; end
          class GooglePay < Stripe::StripeObject; end
          # Attribute for field apple_pay
          sig { returns(ApplePay) }
          def apple_pay; end
          # Attribute for field google_pay
          sig { returns(GooglePay) }
          def google_pay; end
          # The type of the card wallet, one of `apple_pay`, `google_pay`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
          sig { returns(String) }
          def type; end
        end
        # Card brand. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa` or `unknown`.
        sig { returns(T.nilable(String)) }
        def brand; end
        # Check results by Card networks on Card address and CVC at the time of authorization
        sig { returns(T.nilable(Checks)) }
        def checks; end
        # Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
        sig { returns(T.nilable(String)) }
        def country; end
        # A high-level description of the type of cards issued in this range. (For internal use only and not typically available in standard API requests.)
        sig { returns(T.nilable(String)) }
        def description; end
        # Two-digit number representing the card's expiration month.
        sig { returns(T.nilable(Integer)) }
        def exp_month; end
        # Four-digit number representing the card's expiration year.
        sig { returns(T.nilable(Integer)) }
        def exp_year; end
        # Uniquely identifies this particular card number. You can use this attribute to check whether two customers whoâ€™ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
        #
        # *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
        sig { returns(T.nilable(String)) }
        def fingerprint; end
        # Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
        sig { returns(T.nilable(String)) }
        def funding; end
        # Issuer identification number of the card. (For internal use only and not typically available in standard API requests.)
        sig { returns(T.nilable(String)) }
        def iin; end
        # The name of the card's issuing bank. (For internal use only and not typically available in standard API requests.)
        sig { returns(T.nilable(String)) }
        def issuer; end
        # The last four digits of the card.
        sig { returns(T.nilable(String)) }
        def last4; end
        # Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.
        sig { returns(T.nilable(String)) }
        def network; end
        # Populated if this authorization used 3D Secure authentication.
        sig { returns(T.nilable(ThreeDSecure)) }
        def three_d_secure; end
        # If this Card is part of a card wallet, this contains the details of the card wallet.
        sig { returns(T.nilable(Wallet)) }
        def wallet; end
      end
      class CardPresent < Stripe::StripeObject
        class Offline < Stripe::StripeObject
          # Time at which the payment was collected while offline
          sig { returns(T.nilable(Integer)) }
          def stored_at; end
          # The method used to process this payment method offline. Only deferred is allowed.
          sig { returns(T.nilable(String)) }
          def type; end
        end
        # The ID of the Card PaymentMethod which was generated by this SetupAttempt.
        sig { returns(T.nilable(T.any(String, Stripe::PaymentMethod))) }
        def generated_card; end
        # Details about payments collected offline.
        sig { returns(T.nilable(Offline)) }
        def offline; end
      end
      class Cashapp < Stripe::StripeObject; end
      class IdBankTransfer < Stripe::StripeObject
        # Bank where the account is located.
        sig { returns(T.nilable(String)) }
        def bank; end
        # Local bank code of the bank.
        sig { returns(T.nilable(String)) }
        def bank_code; end
        # Name of the bank associated with the bank account.
        sig { returns(T.nilable(String)) }
        def bank_name; end
        # Merchant name and billing details name, for the customer to check for the correct merchant when performing the bank transfer.
        sig { returns(T.nilable(String)) }
        def display_name; end
      end
      class Ideal < Stripe::StripeObject
        # The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `buut`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`.
        sig { returns(T.nilable(String)) }
        def bank; end
        # The Bank Identifier Code of the customer's bank.
        sig { returns(T.nilable(String)) }
        def bic; end
        # The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
        sig { returns(T.nilable(T.any(String, Stripe::PaymentMethod))) }
        def generated_sepa_debit; end
        # The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
        sig { returns(T.nilable(T.any(String, Stripe::Mandate))) }
        def generated_sepa_debit_mandate; end
        # Last four characters of the IBAN.
        sig { returns(T.nilable(String)) }
        def iban_last4; end
        # Owner's verified full name. Values are verified or provided by iDEAL directly
        # (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        sig { returns(T.nilable(String)) }
        def verified_name; end
      end
      class KakaoPay < Stripe::StripeObject; end
      class Klarna < Stripe::StripeObject; end
      class KrCard < Stripe::StripeObject; end
      class Link < Stripe::StripeObject; end
      class NaverPay < Stripe::StripeObject
        # Uniquely identifies this particular Naver Pay account. You can use this attribute to check whether two Naver Pay accounts are the same.
        sig { returns(String) }
        def buyer_id; end
      end
      class NzBankAccount < Stripe::StripeObject; end
      class Paypal < Stripe::StripeObject; end
      class Payto < Stripe::StripeObject; end
      class Pix < Stripe::StripeObject; end
      class RevolutPay < Stripe::StripeObject; end
      class SepaDebit < Stripe::StripeObject; end
      class Sofort < Stripe::StripeObject
        # Bank code of bank associated with the bank account.
        sig { returns(T.nilable(String)) }
        def bank_code; end
        # Name of the bank associated with the bank account.
        sig { returns(T.nilable(String)) }
        def bank_name; end
        # Bank Identifier Code of the bank associated with the bank account.
        sig { returns(T.nilable(String)) }
        def bic; end
        # The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
        sig { returns(T.nilable(T.any(String, Stripe::PaymentMethod))) }
        def generated_sepa_debit; end
        # The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
        sig { returns(T.nilable(T.any(String, Stripe::Mandate))) }
        def generated_sepa_debit_mandate; end
        # Last four characters of the IBAN.
        sig { returns(T.nilable(String)) }
        def iban_last4; end
        # Preferred language of the Sofort authorization page that the customer is redirected to.
        # Can be one of `en`, `de`, `fr`, or `nl`
        sig { returns(T.nilable(String)) }
        def preferred_language; end
        # Owner's verified full name. Values are verified or provided by Sofort directly
        # (if supported) at the time of authorization or settlement. They cannot be set or mutated.
        sig { returns(T.nilable(String)) }
        def verified_name; end
      end
      class StripeBalance < Stripe::StripeObject; end
      class UsBankAccount < Stripe::StripeObject; end
      # Attribute for field acss_debit
      sig { returns(AcssDebit) }
      def acss_debit; end
      # Attribute for field amazon_pay
      sig { returns(AmazonPay) }
      def amazon_pay; end
      # Attribute for field au_becs_debit
      sig { returns(AuBecsDebit) }
      def au_becs_debit; end
      # Attribute for field bacs_debit
      sig { returns(BacsDebit) }
      def bacs_debit; end
      # Attribute for field bancontact
      sig { returns(Bancontact) }
      def bancontact; end
      # Attribute for field boleto
      sig { returns(Boleto) }
      def boleto; end
      # Attribute for field card
      sig { returns(Card) }
      def card; end
      # Attribute for field card_present
      sig { returns(CardPresent) }
      def card_present; end
      # Attribute for field cashapp
      sig { returns(Cashapp) }
      def cashapp; end
      # Attribute for field id_bank_transfer
      sig { returns(IdBankTransfer) }
      def id_bank_transfer; end
      # Attribute for field ideal
      sig { returns(Ideal) }
      def ideal; end
      # Attribute for field kakao_pay
      sig { returns(KakaoPay) }
      def kakao_pay; end
      # Attribute for field klarna
      sig { returns(Klarna) }
      def klarna; end
      # Attribute for field kr_card
      sig { returns(KrCard) }
      def kr_card; end
      # Attribute for field link
      sig { returns(Link) }
      def link; end
      # Attribute for field naver_pay
      sig { returns(NaverPay) }
      def naver_pay; end
      # Attribute for field nz_bank_account
      sig { returns(NzBankAccount) }
      def nz_bank_account; end
      # Attribute for field paypal
      sig { returns(Paypal) }
      def paypal; end
      # Attribute for field payto
      sig { returns(Payto) }
      def payto; end
      # Attribute for field pix
      sig { returns(Pix) }
      def pix; end
      # Attribute for field revolut_pay
      sig { returns(RevolutPay) }
      def revolut_pay; end
      # Attribute for field sepa_debit
      sig { returns(SepaDebit) }
      def sepa_debit; end
      # Attribute for field sofort
      sig { returns(Sofort) }
      def sofort; end
      # Attribute for field stripe_balance
      sig { returns(StripeBalance) }
      def stripe_balance; end
      # The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method.
      sig { returns(String) }
      def type; end
      # Attribute for field us_bank_account
      sig { returns(UsBankAccount) }
      def us_bank_account; end
    end
    class SetupError < Stripe::StripeObject
      # For card errors resulting from a card issuer decline, a short string indicating [how to proceed with an error](https://stripe.com/docs/declines#retrying-issuer-declines) if they provide one.
      sig { returns(String) }
      def advice_code; end
      # For card errors, the ID of the failed charge.
      sig { returns(String) }
      def charge; end
      # For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.
      sig { returns(String) }
      def code; end
      # For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one.
      sig { returns(String) }
      def decline_code; end
      # A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported.
      sig { returns(String) }
      def doc_url; end
      # A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
      sig { returns(String) }
      def message; end
      # For card errors resulting from a card issuer decline, a 2 digit code which indicates the advice given to merchant by the card network on how to proceed with an error.
      sig { returns(String) }
      def network_advice_code; end
      # For payments declined by the network, an alphanumeric code which indicates the reason the payment failed.
      sig { returns(String) }
      def network_decline_code; end
      # If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.
      sig { returns(String) }
      def param; end
      # A PaymentIntent guides you through the process of collecting a payment from your customer.
      # We recommend that you create exactly one PaymentIntent for each order or
      # customer session in your system. You can reference the PaymentIntent later to
      # see the history of payment attempts for a particular session.
      #
      # A PaymentIntent transitions through
      # [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
      # throughout its lifetime as it interfaces with Stripe.js to perform
      # authentication flows and ultimately creates at most one successful charge.
      #
      # Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)
      sig { returns(Stripe::PaymentIntent) }
      def payment_intent; end
      # PaymentMethod objects represent your customer's payment instruments.
      # You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
      # Customer objects to store instrument details for future payments.
      #
      # Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
      sig { returns(Stripe::PaymentMethod) }
      def payment_method; end
      # If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors.
      sig { returns(String) }
      def payment_method_type; end
      # A URL to the request log entry in your dashboard.
      sig { returns(String) }
      def request_log_url; end
      # A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
      # For example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
      # Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
      #
      # Create a SetupIntent when you're ready to collect your customer's payment credentials.
      # Don't maintain long-lived, unconfirmed SetupIntents because they might not be valid.
      # The SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides
      # you through the setup process.
      #
      # Successful SetupIntents result in payment credentials that are optimized for future payments.
      # For example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through
      # [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection
      # to streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).
      # If you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),
      # it automatically attaches the resulting payment method to that Customer after successful setup.
      # We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
      # PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.
      #
      # By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.
      #
      # Related guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)
      sig { returns(Stripe::SetupIntent) }
      def setup_intent; end
      # Attribute for field source
      sig { returns(T.any(Stripe::Account, Stripe::BankAccount, Stripe::Card, Stripe::Source)) }
      def source; end
      # The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`
      sig { returns(String) }
      def type; end
    end
    # The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation.
    sig { returns(T.nilable(T.any(String, Stripe::Application))) }
    def application; end
    # If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
    #
    # It can only be used for this Stripe Accountâ€™s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
    sig { returns(T::Boolean) }
    def attach_to_self; end
    # Time at which the object was created. Measured in seconds since the Unix epoch.
    sig { returns(Integer) }
    def created; end
    # The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation.
    sig { returns(T.nilable(T.any(String, Stripe::Customer))) }
    def customer; end
    # The value of [customer_account](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer_account) on the SetupIntent at the time of this confirmation.
    sig { returns(T.nilable(String)) }
    def customer_account; end
    # Indicates the directions of money movement for which this payment method is intended to be used.
    #
    # Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
    sig { returns(T.nilable(T::Array[String])) }
    def flow_directions; end
    # Unique identifier for the object.
    sig { returns(String) }
    def id; end
    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    sig { returns(T::Boolean) }
    def livemode; end
    # String representing the object's type. Objects of the same type share the same value.
    sig { returns(String) }
    def object; end
    # The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation.
    sig { returns(T.nilable(T.any(String, Stripe::Account))) }
    def on_behalf_of; end
    # ID of the payment method used with this SetupAttempt.
    sig { returns(T.any(String, Stripe::PaymentMethod)) }
    def payment_method; end
    # Attribute for field payment_method_details
    sig { returns(PaymentMethodDetails) }
    def payment_method_details; end
    # The error encountered during this attempt to confirm the SetupIntent, if any.
    sig { returns(T.nilable(SetupError)) }
    def setup_error; end
    # ID of the SetupIntent that this attempt belongs to.
    sig { returns(T.any(String, Stripe::SetupIntent)) }
    def setup_intent; end
    # Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`.
    sig { returns(String) }
    def status; end
    # The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`.
    sig { returns(String) }
    def usage; end
    class ListParams < Stripe::RequestParams
      class Created < Stripe::RequestParams
        # Minimum value to filter by (exclusive)
        sig { returns(T.nilable(Integer)) }
        def gt; end
        sig { params(_gt: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def gt=(_gt); end
        # Minimum value to filter by (inclusive)
        sig { returns(T.nilable(Integer)) }
        def gte; end
        sig { params(_gte: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def gte=(_gte); end
        # Maximum value to filter by (exclusive)
        sig { returns(T.nilable(Integer)) }
        def lt; end
        sig { params(_lt: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def lt=(_lt); end
        # Maximum value to filter by (inclusive)
        sig { returns(T.nilable(Integer)) }
        def lte; end
        sig { params(_lte: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def lte=(_lte); end
        sig {
          params(gt: T.nilable(Integer), gte: T.nilable(Integer), lt: T.nilable(Integer), lte: T.nilable(Integer)).void
         }
        def initialize(gt: nil, gte: nil, lt: nil, lte: nil); end
      end
      # A filter on the list, based on the object `created` field. The value
      # can be a string with an integer Unix timestamp or a
      # dictionary with a number of different query options.
      sig { returns(T.nilable(T.any(::Stripe::SetupAttempt::ListParams::Created, Integer))) }
      def created; end
      sig {
        params(_created: T.nilable(T.any(::Stripe::SetupAttempt::ListParams::Created, Integer))).returns(T.nilable(T.any(::Stripe::SetupAttempt::ListParams::Created, Integer)))
       }
      def created=(_created); end
      # A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
      sig { returns(T.nilable(String)) }
      def ending_before; end
      sig { params(_ending_before: T.nilable(String)).returns(T.nilable(String)) }
      def ending_before=(_ending_before); end
      # Specifies which fields in the response should be expanded.
      sig { returns(T.nilable(T::Array[String])) }
      def expand; end
      sig { params(_expand: T.nilable(T::Array[String])).returns(T.nilable(T::Array[String])) }
      def expand=(_expand); end
      # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
      sig { returns(T.nilable(Integer)) }
      def limit; end
      sig { params(_limit: T.nilable(Integer)).returns(T.nilable(Integer)) }
      def limit=(_limit); end
      # Only return SetupAttempts created by the SetupIntent specified by
      # this ID.
      sig { returns(String) }
      def setup_intent; end
      sig { params(_setup_intent: String).returns(String) }
      def setup_intent=(_setup_intent); end
      # A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
      sig { returns(T.nilable(String)) }
      def starting_after; end
      sig { params(_starting_after: T.nilable(String)).returns(T.nilable(String)) }
      def starting_after=(_starting_after); end
      sig {
        params(created: T.nilable(T.any(::Stripe::SetupAttempt::ListParams::Created, Integer)), ending_before: T.nilable(String), expand: T.nilable(T::Array[String]), limit: T.nilable(Integer), setup_intent: String, starting_after: T.nilable(String)).void
       }
      def initialize(
        created: nil,
        ending_before: nil,
        expand: nil,
        limit: nil,
        setup_intent: nil,
        starting_after: nil
      ); end
    end
    # Returns a list of SetupAttempts that associate with a provided SetupIntent.
    sig {
      params(params: T.any(::Stripe::SetupAttempt::ListParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::ListObject)
     }
    def self.list(params = {}, opts = {}); end
  end
end