# File generated from our OpenAPI spec
# frozen_string_literal: true

# typed: true
module Stripe
  # A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.
  #
  # Related guide: [Subscription schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules)
  class SubscriptionSchedule < APIResource
    class CurrentPhase < Stripe::StripeObject
      # The end of this phase of the subscription schedule.
      sig { returns(Integer) }
      attr_reader :end_date
      # The start of this phase of the subscription schedule.
      sig { returns(Integer) }
      attr_reader :start_date
    end
    class DefaultSettings < Stripe::StripeObject
      class AutomaticTax < Stripe::StripeObject
        class Liability < Stripe::StripeObject
          # The connected account being referenced when `type` is `account`.
          sig { returns(T.any(String, Stripe::Account)) }
          attr_reader :account
          # Type of the account referenced.
          sig { returns(String) }
          attr_reader :type
        end
        # Whether Stripe automatically computes tax on invoices created during this phase.
        sig { returns(T::Boolean) }
        attr_reader :enabled
        # The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
        sig { returns(T.nilable(Liability)) }
        attr_reader :liability
      end
      class BillingThresholds < Stripe::StripeObject
        # Monetary threshold that triggers the subscription to create an invoice
        sig { returns(T.nilable(Integer)) }
        attr_reader :amount_gte
        # Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`.
        sig { returns(T.nilable(T::Boolean)) }
        attr_reader :reset_billing_cycle_anchor
      end
      class InvoiceSettings < Stripe::StripeObject
        class Issuer < Stripe::StripeObject
          # The connected account being referenced when `type` is `account`.
          sig { returns(T.any(String, Stripe::Account)) }
          attr_reader :account
          # Type of the account referenced.
          sig { returns(String) }
          attr_reader :type
        end
        # The account tax IDs associated with the subscription schedule. Will be set on invoices generated by the subscription schedule.
        sig { returns(T.nilable(T::Array[T.any(String, Stripe::TaxId)])) }
        attr_reader :account_tax_ids
        # Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
        sig { returns(T.nilable(Integer)) }
        attr_reader :days_until_due
        # Attribute for field issuer
        sig { returns(Issuer) }
        attr_reader :issuer
      end
      class TransferData < Stripe::StripeObject
        # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
        sig { returns(T.nilable(Float)) }
        attr_reader :amount_percent
        # The account where funds from the payment will be transferred to upon payment success.
        sig { returns(T.any(String, Stripe::Account)) }
        attr_reader :destination
      end
      # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule.
      sig { returns(T.nilable(Float)) }
      attr_reader :application_fee_percent
      # Attribute for field automatic_tax
      sig { returns(AutomaticTax) }
      attr_reader :automatic_tax
      # Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
      sig { returns(String) }
      attr_reader :billing_cycle_anchor
      # Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
      sig { returns(T.nilable(BillingThresholds)) }
      attr_reader :billing_thresholds
      # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
      sig { returns(T.nilable(String)) }
      attr_reader :collection_method
      # ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
      sig { returns(T.nilable(T.any(String, Stripe::PaymentMethod))) }
      attr_reader :default_payment_method
      # Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
      sig { returns(T.nilable(String)) }
      attr_reader :description
      # Attribute for field invoice_settings
      sig { returns(InvoiceSettings) }
      attr_reader :invoice_settings
      # The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details.
      sig { returns(T.nilable(T.any(String, Stripe::Account))) }
      attr_reader :on_behalf_of
      # The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
      sig { returns(T.nilable(TransferData)) }
      attr_reader :transfer_data
    end
    class LastPriceMigrationError < Stripe::StripeObject
      class FailedTransition < Stripe::StripeObject
        # The original price to be migrated.
        sig { returns(String) }
        attr_reader :source_price
        # The intended resulting price of the migration.
        sig { returns(String) }
        attr_reader :target_price
      end
      # The time at which the price migration encountered an error.
      sig { returns(Integer) }
      attr_reader :errored_at
      # The involved price pairs in each failed transition.
      sig { returns(T::Array[FailedTransition]) }
      attr_reader :failed_transitions
      # The type of error encountered by the price migration.
      sig { returns(String) }
      attr_reader :type
    end
    class Phase < Stripe::StripeObject
      class AddInvoiceItem < Stripe::StripeObject
        class Discount < Stripe::StripeObject
          class DiscountEnd < Stripe::StripeObject
            # The discount end timestamp.
            sig { returns(T.nilable(Integer)) }
            attr_reader :timestamp
            # The discount end type.
            sig { returns(String) }
            attr_reader :type
          end
          # ID of the coupon to create a new discount for.
          sig { returns(T.nilable(T.any(String, Stripe::Coupon))) }
          attr_reader :coupon
          # ID of an existing discount on the object (or one of its ancestors) to reuse.
          sig { returns(T.nilable(T.any(String, Stripe::Discount))) }
          attr_reader :discount
          # Details to determine how long the discount should be applied for.
          sig { returns(T.nilable(DiscountEnd)) }
          attr_reader :discount_end
          # ID of the promotion code to create a new discount for.
          sig { returns(T.nilable(T.any(String, Stripe::PromotionCode))) }
          attr_reader :promotion_code
        end
        # The stackable discounts that will be applied to the item.
        sig { returns(T::Array[Discount]) }
        attr_reader :discounts
        # ID of the price used to generate the invoice item.
        sig { returns(T.any(String, Stripe::Price)) }
        attr_reader :price
        # The quantity of the invoice item.
        sig { returns(T.nilable(Integer)) }
        attr_reader :quantity
        # The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item.
        sig { returns(T.nilable(T::Array[Stripe::TaxRate])) }
        attr_reader :tax_rates
      end
      class AutomaticTax < Stripe::StripeObject
        class Liability < Stripe::StripeObject
          # The connected account being referenced when `type` is `account`.
          sig { returns(T.any(String, Stripe::Account)) }
          attr_reader :account
          # Type of the account referenced.
          sig { returns(String) }
          attr_reader :type
        end
        # Whether Stripe automatically computes tax on invoices created during this phase.
        sig { returns(T::Boolean) }
        attr_reader :enabled
        # The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
        sig { returns(T.nilable(Liability)) }
        attr_reader :liability
      end
      class BillingThresholds < Stripe::StripeObject
        # Monetary threshold that triggers the subscription to create an invoice
        sig { returns(T.nilable(Integer)) }
        attr_reader :amount_gte
        # Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`.
        sig { returns(T.nilable(T::Boolean)) }
        attr_reader :reset_billing_cycle_anchor
      end
      class Discount < Stripe::StripeObject
        class DiscountEnd < Stripe::StripeObject
          # The discount end timestamp.
          sig { returns(T.nilable(Integer)) }
          attr_reader :timestamp
          # The discount end type.
          sig { returns(String) }
          attr_reader :type
        end
        # ID of the coupon to create a new discount for.
        sig { returns(T.nilable(T.any(String, Stripe::Coupon))) }
        attr_reader :coupon
        # ID of an existing discount on the object (or one of its ancestors) to reuse.
        sig { returns(T.nilable(T.any(String, Stripe::Discount))) }
        attr_reader :discount
        # Details to determine how long the discount should be applied for.
        sig { returns(T.nilable(DiscountEnd)) }
        attr_reader :discount_end
        # ID of the promotion code to create a new discount for.
        sig { returns(T.nilable(T.any(String, Stripe::PromotionCode))) }
        attr_reader :promotion_code
      end
      class InvoiceSettings < Stripe::StripeObject
        class Issuer < Stripe::StripeObject
          # The connected account being referenced when `type` is `account`.
          sig { returns(T.any(String, Stripe::Account)) }
          attr_reader :account
          # Type of the account referenced.
          sig { returns(String) }
          attr_reader :type
        end
        # The account tax IDs associated with this phase of the subscription schedule. Will be set on invoices generated by this phase of the subscription schedule.
        sig { returns(T.nilable(T::Array[T.any(String, Stripe::TaxId)])) }
        attr_reader :account_tax_ids
        # Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
        sig { returns(T.nilable(Integer)) }
        attr_reader :days_until_due
        # The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
        sig { returns(T.nilable(Issuer)) }
        attr_reader :issuer
      end
      class Item < Stripe::StripeObject
        class BillingThresholds < Stripe::StripeObject
          # Usage threshold that triggers the subscription to create an invoice
          sig { returns(T.nilable(Integer)) }
          attr_reader :usage_gte
        end
        class Discount < Stripe::StripeObject
          class DiscountEnd < Stripe::StripeObject
            # The discount end timestamp.
            sig { returns(T.nilable(Integer)) }
            attr_reader :timestamp
            # The discount end type.
            sig { returns(String) }
            attr_reader :type
          end
          # ID of the coupon to create a new discount for.
          sig { returns(T.nilable(T.any(String, Stripe::Coupon))) }
          attr_reader :coupon
          # ID of an existing discount on the object (or one of its ancestors) to reuse.
          sig { returns(T.nilable(T.any(String, Stripe::Discount))) }
          attr_reader :discount
          # Details to determine how long the discount should be applied for.
          sig { returns(T.nilable(DiscountEnd)) }
          attr_reader :discount_end
          # ID of the promotion code to create a new discount for.
          sig { returns(T.nilable(T.any(String, Stripe::PromotionCode))) }
          attr_reader :promotion_code
        end
        class Trial < Stripe::StripeObject
          # List of price IDs which, if present on the subscription following a paid trial, constitute opting-in to the paid trial.
          sig { returns(T.nilable(T::Array[String])) }
          attr_reader :converts_to
          # Determines the type of trial for this item.
          sig { returns(String) }
          attr_reader :type
        end
        # Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period
        sig { returns(T.nilable(BillingThresholds)) }
        attr_reader :billing_thresholds
        # The discounts applied to the subscription item. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount.
        sig { returns(T::Array[Discount]) }
        attr_reader :discounts
        # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an item. Metadata on this item will update the underlying subscription item's `metadata` when the phase is entered.
        sig { returns(T.nilable(T::Hash[String, String])) }
        attr_reader :metadata
        # ID of the plan to which the customer should be subscribed.
        sig { returns(T.any(String, Stripe::Plan)) }
        attr_reader :plan
        # ID of the price to which the customer should be subscribed.
        sig { returns(T.any(String, Stripe::Price)) }
        attr_reader :price
        # Quantity of the plan to which the customer should be subscribed.
        sig { returns(Integer) }
        attr_reader :quantity
        # The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`.
        sig { returns(T.nilable(T::Array[Stripe::TaxRate])) }
        attr_reader :tax_rates
        # Options that configure the trial on the subscription item.
        sig { returns(T.nilable(Trial)) }
        attr_reader :trial
      end
      class PauseCollection < Stripe::StripeObject
        # The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`.
        sig { returns(String) }
        attr_reader :behavior
      end
      class TransferData < Stripe::StripeObject
        # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
        sig { returns(T.nilable(Float)) }
        attr_reader :amount_percent
        # The account where funds from the payment will be transferred to upon payment success.
        sig { returns(T.any(String, Stripe::Account)) }
        attr_reader :destination
      end
      class TrialSettings < Stripe::StripeObject
        class EndBehavior < Stripe::StripeObject
          # Configure how an opt-in following a paid trial is billed when using `billing_behavior: prorate_up_front`.
          sig { returns(T.nilable(String)) }
          attr_reader :prorate_up_front
        end
        # Defines how the subscription should behave when a trial ends.
        sig { returns(T.nilable(EndBehavior)) }
        attr_reader :end_behavior
      end
      # A list of prices and quantities that will generate invoice items appended to the next invoice for this phase.
      sig { returns(T::Array[AddInvoiceItem]) }
      attr_reader :add_invoice_items
      # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule.
      sig { returns(T.nilable(Float)) }
      attr_reader :application_fee_percent
      # Attribute for field automatic_tax
      sig { returns(AutomaticTax) }
      attr_reader :automatic_tax
      # Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
      sig { returns(T.nilable(String)) }
      attr_reader :billing_cycle_anchor
      # Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
      sig { returns(T.nilable(BillingThresholds)) }
      attr_reader :billing_thresholds
      # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
      sig { returns(T.nilable(String)) }
      attr_reader :collection_method
      # ID of the coupon to use during this phase of the subscription schedule.
      sig { returns(T.nilable(T.any(String, Stripe::Coupon))) }
      attr_reader :coupon
      # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
      sig { returns(String) }
      attr_reader :currency
      # ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
      sig { returns(T.nilable(T.any(String, Stripe::PaymentMethod))) }
      attr_reader :default_payment_method
      # The default tax rates to apply to the subscription during this phase of the subscription schedule.
      sig { returns(T.nilable(T::Array[Stripe::TaxRate])) }
      attr_reader :default_tax_rates
      # Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
      sig { returns(T.nilable(String)) }
      attr_reader :description
      # The stackable discounts that will be applied to the subscription on this phase. Subscription item discounts are applied before subscription discounts.
      sig { returns(T::Array[Discount]) }
      attr_reader :discounts
      # The end of this phase of the subscription schedule.
      sig { returns(Integer) }
      attr_reader :end_date
      # The invoice settings applicable during this phase.
      sig { returns(T.nilable(InvoiceSettings)) }
      attr_reader :invoice_settings
      # Subscription items to configure the subscription to during this phase of the subscription schedule.
      sig { returns(T::Array[Item]) }
      attr_reader :items
      # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a phase. Metadata on a schedule's phase will update the underlying subscription's `metadata` when the phase is entered. Updating the underlying subscription's `metadata` directly will not affect the current phase's `metadata`.
      sig { returns(T.nilable(T::Hash[String, String])) }
      attr_reader :metadata
      # The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details.
      sig { returns(T.nilable(T.any(String, Stripe::Account))) }
      attr_reader :on_behalf_of
      # If specified, payment collection for this subscription will be paused. Note that the subscription status will be unchanged and will not be updated to `paused`. Learn more about [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment).
      sig { returns(T.nilable(PauseCollection)) }
      attr_reader :pause_collection
      # If the subscription schedule will prorate when transitioning to this phase. Possible values are `create_prorations` and `none`.
      sig { returns(String) }
      attr_reader :proration_behavior
      # The start of this phase of the subscription schedule.
      sig { returns(Integer) }
      attr_reader :start_date
      # The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
      sig { returns(T.nilable(TransferData)) }
      attr_reader :transfer_data
      # Specify behavior of the trial when crossing schedule phase boundaries
      sig { returns(T.nilable(String)) }
      attr_reader :trial_continuation
      # When the trial ends within the phase.
      sig { returns(T.nilable(Integer)) }
      attr_reader :trial_end
      # Settings related to any trials on the subscription during this phase.
      sig { returns(T.nilable(TrialSettings)) }
      attr_reader :trial_settings
    end
    class Prebilling < Stripe::StripeObject
      # ID of the prebilling invoice.
      sig { returns(T.any(String, Stripe::Invoice)) }
      attr_reader :invoice
      # The end of the last period for which the invoice pre-bills.
      sig { returns(Integer) }
      attr_reader :period_end
      # The start of the first period for which the invoice pre-bills.
      sig { returns(Integer) }
      attr_reader :period_start
      # Whether to cancel or preserve `prebilling` if the subscription is updated during the prebilled period.
      sig { returns(String) }
      attr_reader :update_behavior
    end
    # ID of the Connect Application that created the schedule.
    sig { returns(T.nilable(T.any(String, Stripe::Application))) }
    attr_reader :application

    # Configures when the subscription schedule generates prorations for phase transitions. Possible values are `prorate_on_next_phase` or `prorate_up_front` with the default being `prorate_on_next_phase`. `prorate_on_next_phase` will apply phase changes and generate prorations at transition time. `prorate_up_front` will bill for all phases within the current billing cycle up front.
    sig { returns(String) }
    attr_reader :billing_behavior

    # Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
    sig { returns(T.nilable(Integer)) }
    attr_reader :canceled_at

    # Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
    sig { returns(T.nilable(Integer)) }
    attr_reader :completed_at

    # Time at which the object was created. Measured in seconds since the Unix epoch.
    sig { returns(Integer) }
    attr_reader :created

    # Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.
    sig { returns(T.nilable(CurrentPhase)) }
    attr_reader :current_phase

    # ID of the customer who owns the subscription schedule.
    sig { returns(T.any(String, Stripe::Customer)) }
    attr_reader :customer

    # Attribute for field default_settings
    sig { returns(DefaultSettings) }
    attr_reader :default_settings

    # Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription.
    sig { returns(String) }
    attr_reader :end_behavior

    # Unique identifier for the object.
    sig { returns(String) }
    attr_reader :id

    # Details of the most recent price migration that failed for the subscription schedule.
    sig { returns(T.nilable(LastPriceMigrationError)) }
    attr_reader :last_price_migration_error

    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    sig { returns(T::Boolean) }
    attr_reader :livemode

    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    sig { returns(T.nilable(T::Hash[String, String])) }
    attr_reader :metadata

    # String representing the object's type. Objects of the same type share the same value.
    sig { returns(String) }
    attr_reader :object

    # Configuration for the subscription schedule's phases.
    sig { returns(T::Array[Phase]) }
    attr_reader :phases

    # Time period and invoice for a Subscription billed in advance.
    sig { returns(T.nilable(Prebilling)) }
    attr_reader :prebilling

    # Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
    sig { returns(T.nilable(Integer)) }
    attr_reader :released_at

    # ID of the subscription once managed by the subscription schedule (if it is released).
    sig { returns(T.nilable(String)) }
    attr_reader :released_subscription

    # The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
    sig { returns(String) }
    attr_reader :status

    # ID of the subscription managed by the subscription schedule.
    sig { returns(T.nilable(T.any(String, Stripe::Subscription))) }
    attr_reader :subscription

    # ID of the test clock this subscription schedule belongs to.
    sig { returns(T.nilable(T.any(String, Stripe::TestHelpers::TestClock))) }
    attr_reader :test_clock
  end
end