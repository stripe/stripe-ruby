# File generated from our OpenAPI spec
# frozen_string_literal: true

# typed: true
module Stripe
  # A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.
  #
  # Related guide: [Subscription schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules)
  class SubscriptionSchedule < APIResource
    class BillingMode < Stripe::StripeObject
      # Controls how prorations and invoices for subscriptions are calculated and orchestrated.
      sig { returns(String) }
      def type; end
      # Details on when the current billing_mode was adopted.
      sig { returns(Integer) }
      def updated_at; end
    end
    class CurrentPhase < Stripe::StripeObject
      # The end of this phase of the subscription schedule.
      sig { returns(Integer) }
      def end_date; end
      # The start of this phase of the subscription schedule.
      sig { returns(Integer) }
      def start_date; end
    end
    class DefaultSettings < Stripe::StripeObject
      class AutomaticTax < Stripe::StripeObject
        class Liability < Stripe::StripeObject
          # The connected account being referenced when `type` is `account`.
          sig { returns(T.any(String, Stripe::Account)) }
          def account; end
          # Type of the account referenced.
          sig { returns(String) }
          def type; end
        end
        # If Stripe disabled automatic tax, this enum describes why.
        sig { returns(T.nilable(String)) }
        def disabled_reason; end
        # Whether Stripe automatically computes tax on invoices created during this phase.
        sig { returns(T::Boolean) }
        def enabled; end
        # The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
        sig { returns(T.nilable(Liability)) }
        def liability; end
      end
      class BillingThresholds < Stripe::StripeObject
        # Monetary threshold that triggers the subscription to create an invoice
        sig { returns(T.nilable(Integer)) }
        def amount_gte; end
        # Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`.
        sig { returns(T.nilable(T::Boolean)) }
        def reset_billing_cycle_anchor; end
      end
      class InvoiceSettings < Stripe::StripeObject
        class Issuer < Stripe::StripeObject
          # The connected account being referenced when `type` is `account`.
          sig { returns(T.any(String, Stripe::Account)) }
          def account; end
          # Type of the account referenced.
          sig { returns(String) }
          def type; end
        end
        # The account tax IDs associated with the subscription schedule. Will be set on invoices generated by the subscription schedule.
        sig { returns(T.nilable(T::Array[T.any(String, Stripe::TaxId)])) }
        def account_tax_ids; end
        # Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
        sig { returns(T.nilable(Integer)) }
        def days_until_due; end
        # Attribute for field issuer
        sig { returns(Issuer) }
        def issuer; end
      end
      class TransferData < Stripe::StripeObject
        # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
        sig { returns(T.nilable(Float)) }
        def amount_percent; end
        # The account where funds from the payment will be transferred to upon payment success.
        sig { returns(T.any(String, Stripe::Account)) }
        def destination; end
      end
      # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule.
      sig { returns(T.nilable(Float)) }
      def application_fee_percent; end
      # Attribute for field automatic_tax
      sig { returns(AutomaticTax) }
      def automatic_tax; end
      # Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
      sig { returns(String) }
      def billing_cycle_anchor; end
      # Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
      sig { returns(T.nilable(BillingThresholds)) }
      def billing_thresholds; end
      # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
      sig { returns(T.nilable(String)) }
      def collection_method; end
      # ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
      sig { returns(T.nilable(T.any(String, Stripe::PaymentMethod))) }
      def default_payment_method; end
      # Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
      sig { returns(T.nilable(String)) }
      def description; end
      # Attribute for field invoice_settings
      sig { returns(InvoiceSettings) }
      def invoice_settings; end
      # The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details.
      sig { returns(T.nilable(T.any(String, Stripe::Account))) }
      def on_behalf_of; end
      # The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
      sig { returns(T.nilable(TransferData)) }
      def transfer_data; end
    end
    class Phase < Stripe::StripeObject
      class AddInvoiceItem < Stripe::StripeObject
        class Discount < Stripe::StripeObject
          # ID of the coupon to create a new discount for.
          sig { returns(T.nilable(T.any(String, Stripe::Coupon))) }
          def coupon; end
          # ID of an existing discount on the object (or one of its ancestors) to reuse.
          sig { returns(T.nilable(T.any(String, Stripe::Discount))) }
          def discount; end
          # ID of the promotion code to create a new discount for.
          sig { returns(T.nilable(T.any(String, Stripe::PromotionCode))) }
          def promotion_code; end
        end
        class Period < Stripe::StripeObject
          class End < Stripe::StripeObject
            # A precise Unix timestamp for the end of the invoice item period. Must be greater than or equal to `period.start`.
            sig { returns(Integer) }
            def timestamp; end
            # Select how to calculate the end of the invoice item period.
            sig { returns(String) }
            def type; end
          end
          class Start < Stripe::StripeObject
            # A precise Unix timestamp for the start of the invoice item period. Must be less than or equal to `period.end`.
            sig { returns(Integer) }
            def timestamp; end
            # Select how to calculate the start of the invoice item period.
            sig { returns(String) }
            def type; end
          end
          # Attribute for field end
          sig { returns(End) }
          def end; end
          # Attribute for field start
          sig { returns(Start) }
          def start; end
        end
        # The stackable discounts that will be applied to the item.
        sig { returns(T::Array[Discount]) }
        def discounts; end
        # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
        sig { returns(T.nilable(T::Hash[String, String])) }
        def metadata; end
        # Attribute for field period
        sig { returns(Period) }
        def period; end
        # ID of the price used to generate the invoice item.
        sig { returns(T.any(String, Stripe::Price)) }
        def price; end
        # The quantity of the invoice item.
        sig { returns(T.nilable(Integer)) }
        def quantity; end
        # The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item.
        sig { returns(T.nilable(T::Array[Stripe::TaxRate])) }
        def tax_rates; end
      end
      class AutomaticTax < Stripe::StripeObject
        class Liability < Stripe::StripeObject
          # The connected account being referenced when `type` is `account`.
          sig { returns(T.any(String, Stripe::Account)) }
          def account; end
          # Type of the account referenced.
          sig { returns(String) }
          def type; end
        end
        # If Stripe disabled automatic tax, this enum describes why.
        sig { returns(T.nilable(String)) }
        def disabled_reason; end
        # Whether Stripe automatically computes tax on invoices created during this phase.
        sig { returns(T::Boolean) }
        def enabled; end
        # The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
        sig { returns(T.nilable(Liability)) }
        def liability; end
      end
      class BillingThresholds < Stripe::StripeObject
        # Monetary threshold that triggers the subscription to create an invoice
        sig { returns(T.nilable(Integer)) }
        def amount_gte; end
        # Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`.
        sig { returns(T.nilable(T::Boolean)) }
        def reset_billing_cycle_anchor; end
      end
      class Discount < Stripe::StripeObject
        # ID of the coupon to create a new discount for.
        sig { returns(T.nilable(T.any(String, Stripe::Coupon))) }
        def coupon; end
        # ID of an existing discount on the object (or one of its ancestors) to reuse.
        sig { returns(T.nilable(T.any(String, Stripe::Discount))) }
        def discount; end
        # ID of the promotion code to create a new discount for.
        sig { returns(T.nilable(T.any(String, Stripe::PromotionCode))) }
        def promotion_code; end
      end
      class InvoiceSettings < Stripe::StripeObject
        class Issuer < Stripe::StripeObject
          # The connected account being referenced when `type` is `account`.
          sig { returns(T.any(String, Stripe::Account)) }
          def account; end
          # Type of the account referenced.
          sig { returns(String) }
          def type; end
        end
        # The account tax IDs associated with this phase of the subscription schedule. Will be set on invoices generated by this phase of the subscription schedule.
        sig { returns(T.nilable(T::Array[T.any(String, Stripe::TaxId)])) }
        def account_tax_ids; end
        # Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
        sig { returns(T.nilable(Integer)) }
        def days_until_due; end
        # The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
        sig { returns(T.nilable(Issuer)) }
        def issuer; end
      end
      class Item < Stripe::StripeObject
        class BillingThresholds < Stripe::StripeObject
          # Usage threshold that triggers the subscription to create an invoice
          sig { returns(T.nilable(Integer)) }
          def usage_gte; end
        end
        class Discount < Stripe::StripeObject
          # ID of the coupon to create a new discount for.
          sig { returns(T.nilable(T.any(String, Stripe::Coupon))) }
          def coupon; end
          # ID of an existing discount on the object (or one of its ancestors) to reuse.
          sig { returns(T.nilable(T.any(String, Stripe::Discount))) }
          def discount; end
          # ID of the promotion code to create a new discount for.
          sig { returns(T.nilable(T.any(String, Stripe::PromotionCode))) }
          def promotion_code; end
        end
        # Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period
        sig { returns(T.nilable(BillingThresholds)) }
        def billing_thresholds; end
        # The discounts applied to the subscription item. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount.
        sig { returns(T::Array[Discount]) }
        def discounts; end
        # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an item. Metadata on this item will update the underlying subscription item's `metadata` when the phase is entered.
        sig { returns(T.nilable(T::Hash[String, String])) }
        def metadata; end
        # ID of the plan to which the customer should be subscribed.
        sig { returns(T.any(String, Stripe::Plan)) }
        def plan; end
        # ID of the price to which the customer should be subscribed.
        sig { returns(T.any(String, Stripe::Price)) }
        def price; end
        # Quantity of the plan to which the customer should be subscribed.
        sig { returns(Integer) }
        def quantity; end
        # The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`.
        sig { returns(T.nilable(T::Array[Stripe::TaxRate])) }
        def tax_rates; end
      end
      class TransferData < Stripe::StripeObject
        # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
        sig { returns(T.nilable(Float)) }
        def amount_percent; end
        # The account where funds from the payment will be transferred to upon payment success.
        sig { returns(T.any(String, Stripe::Account)) }
        def destination; end
      end
      # A list of prices and quantities that will generate invoice items appended to the next invoice for this phase.
      sig { returns(T::Array[AddInvoiceItem]) }
      def add_invoice_items; end
      # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule.
      sig { returns(T.nilable(Float)) }
      def application_fee_percent; end
      # Attribute for field automatic_tax
      sig { returns(AutomaticTax) }
      def automatic_tax; end
      # Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
      sig { returns(T.nilable(String)) }
      def billing_cycle_anchor; end
      # Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
      sig { returns(T.nilable(BillingThresholds)) }
      def billing_thresholds; end
      # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
      sig { returns(T.nilable(String)) }
      def collection_method; end
      # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
      sig { returns(String) }
      def currency; end
      # ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
      sig { returns(T.nilable(T.any(String, Stripe::PaymentMethod))) }
      def default_payment_method; end
      # The default tax rates to apply to the subscription during this phase of the subscription schedule.
      sig { returns(T.nilable(T::Array[Stripe::TaxRate])) }
      def default_tax_rates; end
      # Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
      sig { returns(T.nilable(String)) }
      def description; end
      # The stackable discounts that will be applied to the subscription on this phase. Subscription item discounts are applied before subscription discounts.
      sig { returns(T::Array[Discount]) }
      def discounts; end
      # The end of this phase of the subscription schedule.
      sig { returns(Integer) }
      def end_date; end
      # The invoice settings applicable during this phase.
      sig { returns(T.nilable(InvoiceSettings)) }
      def invoice_settings; end
      # Subscription items to configure the subscription to during this phase of the subscription schedule.
      sig { returns(T::Array[Item]) }
      def items; end
      # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a phase. Metadata on a schedule's phase will update the underlying subscription's `metadata` when the phase is entered. Updating the underlying subscription's `metadata` directly will not affect the current phase's `metadata`.
      sig { returns(T.nilable(T::Hash[String, String])) }
      def metadata; end
      # The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details.
      sig { returns(T.nilable(T.any(String, Stripe::Account))) }
      def on_behalf_of; end
      # When transitioning phases, controls how prorations are handled (if any). Possible values are `create_prorations`, `none`, and `always_invoice`.
      sig { returns(String) }
      def proration_behavior; end
      # The start of this phase of the subscription schedule.
      sig { returns(Integer) }
      def start_date; end
      # The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
      sig { returns(T.nilable(TransferData)) }
      def transfer_data; end
      # When the trial ends within the phase.
      sig { returns(T.nilable(Integer)) }
      def trial_end; end
    end
    # ID of the Connect Application that created the schedule.
    sig { returns(T.nilable(T.any(String, Stripe::Application))) }
    def application; end
    # The billing mode of the subscription.
    sig { returns(BillingMode) }
    def billing_mode; end
    # Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
    sig { returns(T.nilable(Integer)) }
    def canceled_at; end
    # Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
    sig { returns(T.nilable(Integer)) }
    def completed_at; end
    # Time at which the object was created. Measured in seconds since the Unix epoch.
    sig { returns(Integer) }
    def created; end
    # Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.
    sig { returns(T.nilable(CurrentPhase)) }
    def current_phase; end
    # ID of the customer who owns the subscription schedule.
    sig { returns(T.any(String, Stripe::Customer)) }
    def customer; end
    # Attribute for field default_settings
    sig { returns(DefaultSettings) }
    def default_settings; end
    # Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription.
    sig { returns(String) }
    def end_behavior; end
    # Unique identifier for the object.
    sig { returns(String) }
    def id; end
    # Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
    sig { returns(T::Boolean) }
    def livemode; end
    # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
    sig { returns(T.nilable(T::Hash[String, String])) }
    def metadata; end
    # String representing the object's type. Objects of the same type share the same value.
    sig { returns(String) }
    def object; end
    # Configuration for the subscription schedule's phases.
    sig { returns(T::Array[Phase]) }
    def phases; end
    # Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
    sig { returns(T.nilable(Integer)) }
    def released_at; end
    # ID of the subscription once managed by the subscription schedule (if it is released).
    sig { returns(T.nilable(String)) }
    def released_subscription; end
    # The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
    sig { returns(String) }
    def status; end
    # ID of the subscription managed by the subscription schedule.
    sig { returns(T.nilable(T.any(String, Stripe::Subscription))) }
    def subscription; end
    # ID of the test clock this subscription schedule belongs to.
    sig { returns(T.nilable(T.any(String, Stripe::TestHelpers::TestClock))) }
    def test_clock; end
    class ListParams < Stripe::RequestParams
      class CanceledAt < Stripe::RequestParams
        # Minimum value to filter by (exclusive)
        sig { returns(T.nilable(Integer)) }
        def gt; end
        sig { params(_gt: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def gt=(_gt); end
        # Minimum value to filter by (inclusive)
        sig { returns(T.nilable(Integer)) }
        def gte; end
        sig { params(_gte: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def gte=(_gte); end
        # Maximum value to filter by (exclusive)
        sig { returns(T.nilable(Integer)) }
        def lt; end
        sig { params(_lt: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def lt=(_lt); end
        # Maximum value to filter by (inclusive)
        sig { returns(T.nilable(Integer)) }
        def lte; end
        sig { params(_lte: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def lte=(_lte); end
        sig {
          params(gt: T.nilable(Integer), gte: T.nilable(Integer), lt: T.nilable(Integer), lte: T.nilable(Integer)).void
         }
        def initialize(gt: nil, gte: nil, lt: nil, lte: nil); end
      end
      class CompletedAt < Stripe::RequestParams
        # Minimum value to filter by (exclusive)
        sig { returns(T.nilable(Integer)) }
        def gt; end
        sig { params(_gt: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def gt=(_gt); end
        # Minimum value to filter by (inclusive)
        sig { returns(T.nilable(Integer)) }
        def gte; end
        sig { params(_gte: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def gte=(_gte); end
        # Maximum value to filter by (exclusive)
        sig { returns(T.nilable(Integer)) }
        def lt; end
        sig { params(_lt: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def lt=(_lt); end
        # Maximum value to filter by (inclusive)
        sig { returns(T.nilable(Integer)) }
        def lte; end
        sig { params(_lte: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def lte=(_lte); end
        sig {
          params(gt: T.nilable(Integer), gte: T.nilable(Integer), lt: T.nilable(Integer), lte: T.nilable(Integer)).void
         }
        def initialize(gt: nil, gte: nil, lt: nil, lte: nil); end
      end
      class Created < Stripe::RequestParams
        # Minimum value to filter by (exclusive)
        sig { returns(T.nilable(Integer)) }
        def gt; end
        sig { params(_gt: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def gt=(_gt); end
        # Minimum value to filter by (inclusive)
        sig { returns(T.nilable(Integer)) }
        def gte; end
        sig { params(_gte: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def gte=(_gte); end
        # Maximum value to filter by (exclusive)
        sig { returns(T.nilable(Integer)) }
        def lt; end
        sig { params(_lt: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def lt=(_lt); end
        # Maximum value to filter by (inclusive)
        sig { returns(T.nilable(Integer)) }
        def lte; end
        sig { params(_lte: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def lte=(_lte); end
        sig {
          params(gt: T.nilable(Integer), gte: T.nilable(Integer), lt: T.nilable(Integer), lte: T.nilable(Integer)).void
         }
        def initialize(gt: nil, gte: nil, lt: nil, lte: nil); end
      end
      class ReleasedAt < Stripe::RequestParams
        # Minimum value to filter by (exclusive)
        sig { returns(T.nilable(Integer)) }
        def gt; end
        sig { params(_gt: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def gt=(_gt); end
        # Minimum value to filter by (inclusive)
        sig { returns(T.nilable(Integer)) }
        def gte; end
        sig { params(_gte: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def gte=(_gte); end
        # Maximum value to filter by (exclusive)
        sig { returns(T.nilable(Integer)) }
        def lt; end
        sig { params(_lt: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def lt=(_lt); end
        # Maximum value to filter by (inclusive)
        sig { returns(T.nilable(Integer)) }
        def lte; end
        sig { params(_lte: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def lte=(_lte); end
        sig {
          params(gt: T.nilable(Integer), gte: T.nilable(Integer), lt: T.nilable(Integer), lte: T.nilable(Integer)).void
         }
        def initialize(gt: nil, gte: nil, lt: nil, lte: nil); end
      end
      # Only return subscription schedules that were created canceled the given date interval.
      sig {
        returns(T.nilable(T.any(::Stripe::SubscriptionSchedule::ListParams::CanceledAt, Integer)))
       }
      def canceled_at; end
      sig {
        params(_canceled_at: T.nilable(T.any(::Stripe::SubscriptionSchedule::ListParams::CanceledAt, Integer))).returns(T.nilable(T.any(::Stripe::SubscriptionSchedule::ListParams::CanceledAt, Integer)))
       }
      def canceled_at=(_canceled_at); end
      # Only return subscription schedules that completed during the given date interval.
      sig {
        returns(T.nilable(T.any(::Stripe::SubscriptionSchedule::ListParams::CompletedAt, Integer)))
       }
      def completed_at; end
      sig {
        params(_completed_at: T.nilable(T.any(::Stripe::SubscriptionSchedule::ListParams::CompletedAt, Integer))).returns(T.nilable(T.any(::Stripe::SubscriptionSchedule::ListParams::CompletedAt, Integer)))
       }
      def completed_at=(_completed_at); end
      # Only return subscription schedules that were created during the given date interval.
      sig {
        returns(T.nilable(T.any(::Stripe::SubscriptionSchedule::ListParams::Created, Integer)))
       }
      def created; end
      sig {
        params(_created: T.nilable(T.any(::Stripe::SubscriptionSchedule::ListParams::Created, Integer))).returns(T.nilable(T.any(::Stripe::SubscriptionSchedule::ListParams::Created, Integer)))
       }
      def created=(_created); end
      # Only return subscription schedules for the given customer.
      sig { returns(T.nilable(String)) }
      def customer; end
      sig { params(_customer: T.nilable(String)).returns(T.nilable(String)) }
      def customer=(_customer); end
      # A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
      sig { returns(T.nilable(String)) }
      def ending_before; end
      sig { params(_ending_before: T.nilable(String)).returns(T.nilable(String)) }
      def ending_before=(_ending_before); end
      # Specifies which fields in the response should be expanded.
      sig { returns(T.nilable(T::Array[String])) }
      def expand; end
      sig { params(_expand: T.nilable(T::Array[String])).returns(T.nilable(T::Array[String])) }
      def expand=(_expand); end
      # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
      sig { returns(T.nilable(Integer)) }
      def limit; end
      sig { params(_limit: T.nilable(Integer)).returns(T.nilable(Integer)) }
      def limit=(_limit); end
      # Only return subscription schedules that were released during the given date interval.
      sig {
        returns(T.nilable(T.any(::Stripe::SubscriptionSchedule::ListParams::ReleasedAt, Integer)))
       }
      def released_at; end
      sig {
        params(_released_at: T.nilable(T.any(::Stripe::SubscriptionSchedule::ListParams::ReleasedAt, Integer))).returns(T.nilable(T.any(::Stripe::SubscriptionSchedule::ListParams::ReleasedAt, Integer)))
       }
      def released_at=(_released_at); end
      # Only return subscription schedules that have not started yet.
      sig { returns(T.nilable(T::Boolean)) }
      def scheduled; end
      sig { params(_scheduled: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
      def scheduled=(_scheduled); end
      # A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
      sig { returns(T.nilable(String)) }
      def starting_after; end
      sig { params(_starting_after: T.nilable(String)).returns(T.nilable(String)) }
      def starting_after=(_starting_after); end
      sig {
        params(canceled_at: T.nilable(T.any(::Stripe::SubscriptionSchedule::ListParams::CanceledAt, Integer)), completed_at: T.nilable(T.any(::Stripe::SubscriptionSchedule::ListParams::CompletedAt, Integer)), created: T.nilable(T.any(::Stripe::SubscriptionSchedule::ListParams::Created, Integer)), customer: T.nilable(String), ending_before: T.nilable(String), expand: T.nilable(T::Array[String]), limit: T.nilable(Integer), released_at: T.nilable(T.any(::Stripe::SubscriptionSchedule::ListParams::ReleasedAt, Integer)), scheduled: T.nilable(T::Boolean), starting_after: T.nilable(String)).void
       }
      def initialize(
        canceled_at: nil,
        completed_at: nil,
        created: nil,
        customer: nil,
        ending_before: nil,
        expand: nil,
        limit: nil,
        released_at: nil,
        scheduled: nil,
        starting_after: nil
      ); end
    end
    class CreateParams < Stripe::RequestParams
      class BillingMode < Stripe::RequestParams
        # Controls the calculation and orchestration of prorations and invoices for subscriptions.
        sig { returns(String) }
        def type; end
        sig { params(_type: String).returns(String) }
        def type=(_type); end
        sig { params(type: String).void }
        def initialize(type: nil); end
      end
      class DefaultSettings < Stripe::RequestParams
        class AutomaticTax < Stripe::RequestParams
          class Liability < Stripe::RequestParams
            # The connected account being referenced when `type` is `account`.
            sig { returns(T.nilable(String)) }
            def account; end
            sig { params(_account: T.nilable(String)).returns(T.nilable(String)) }
            def account=(_account); end
            # Type of the account referenced in the request.
            sig { returns(String) }
            def type; end
            sig { params(_type: String).returns(String) }
            def type=(_type); end
            sig { params(account: T.nilable(String), type: String).void }
            def initialize(account: nil, type: nil); end
          end
          # Enabled automatic tax calculation which will automatically compute tax rates on all invoices generated by the subscription.
          sig { returns(T::Boolean) }
          def enabled; end
          sig { params(_enabled: T::Boolean).returns(T::Boolean) }
          def enabled=(_enabled); end
          # The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
          sig {
            returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::AutomaticTax::Liability))
           }
          def liability; end
          sig {
            params(_liability: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::AutomaticTax::Liability)).returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::AutomaticTax::Liability))
           }
          def liability=(_liability); end
          sig {
            params(enabled: T::Boolean, liability: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::AutomaticTax::Liability)).void
           }
          def initialize(enabled: nil, liability: nil); end
        end
        class BillingThresholds < Stripe::RequestParams
          # Monetary threshold that triggers the subscription to advance to a new billing period
          sig { returns(T.nilable(Integer)) }
          def amount_gte; end
          sig { params(_amount_gte: T.nilable(Integer)).returns(T.nilable(Integer)) }
          def amount_gte=(_amount_gte); end
          # Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged.
          sig { returns(T.nilable(T::Boolean)) }
          def reset_billing_cycle_anchor; end
          sig {
            params(_reset_billing_cycle_anchor: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean))
           }
          def reset_billing_cycle_anchor=(_reset_billing_cycle_anchor); end
          sig {
            params(amount_gte: T.nilable(Integer), reset_billing_cycle_anchor: T.nilable(T::Boolean)).void
           }
          def initialize(amount_gte: nil, reset_billing_cycle_anchor: nil); end
        end
        class InvoiceSettings < Stripe::RequestParams
          class Issuer < Stripe::RequestParams
            # The connected account being referenced when `type` is `account`.
            sig { returns(T.nilable(String)) }
            def account; end
            sig { params(_account: T.nilable(String)).returns(T.nilable(String)) }
            def account=(_account); end
            # Type of the account referenced in the request.
            sig { returns(String) }
            def type; end
            sig { params(_type: String).returns(String) }
            def type=(_type); end
            sig { params(account: T.nilable(String), type: String).void }
            def initialize(account: nil, type: nil); end
          end
          # The account tax IDs associated with the subscription schedule. Will be set on invoices generated by the subscription schedule.
          sig { returns(T.nilable(T.any(String, T::Array[String]))) }
          def account_tax_ids; end
          sig {
            params(_account_tax_ids: T.nilable(T.any(String, T::Array[String]))).returns(T.nilable(T.any(String, T::Array[String])))
           }
          def account_tax_ids=(_account_tax_ids); end
          # Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `collection_method=charge_automatically`.
          sig { returns(T.nilable(Integer)) }
          def days_until_due; end
          sig { params(_days_until_due: T.nilable(Integer)).returns(T.nilable(Integer)) }
          def days_until_due=(_days_until_due); end
          # The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
          sig {
            returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::InvoiceSettings::Issuer))
           }
          def issuer; end
          sig {
            params(_issuer: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::InvoiceSettings::Issuer)).returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::InvoiceSettings::Issuer))
           }
          def issuer=(_issuer); end
          sig {
            params(account_tax_ids: T.nilable(T.any(String, T::Array[String])), days_until_due: T.nilable(Integer), issuer: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::InvoiceSettings::Issuer)).void
           }
          def initialize(account_tax_ids: nil, days_until_due: nil, issuer: nil); end
        end
        class TransferData < Stripe::RequestParams
          # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
          sig { returns(T.nilable(Float)) }
          def amount_percent; end
          sig { params(_amount_percent: T.nilable(Float)).returns(T.nilable(Float)) }
          def amount_percent=(_amount_percent); end
          # ID of an existing, connected Stripe account.
          sig { returns(String) }
          def destination; end
          sig { params(_destination: String).returns(String) }
          def destination=(_destination); end
          sig { params(amount_percent: T.nilable(Float), destination: String).void }
          def initialize(amount_percent: nil, destination: nil); end
        end
        # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions).
        sig { returns(T.nilable(Float)) }
        def application_fee_percent; end
        sig { params(_application_fee_percent: T.nilable(Float)).returns(T.nilable(Float)) }
        def application_fee_percent=(_application_fee_percent); end
        # Default settings for automatic tax computation.
        sig {
          returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::AutomaticTax))
         }
        def automatic_tax; end
        sig {
          params(_automatic_tax: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::AutomaticTax)).returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::AutomaticTax))
         }
        def automatic_tax=(_automatic_tax); end
        # Can be set to `phase_start` to set the anchor to the start of the phase or `automatic` to automatically change it if needed. Cannot be set to `phase_start` if this phase specifies a trial. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
        sig { returns(T.nilable(String)) }
        def billing_cycle_anchor; end
        sig { params(_billing_cycle_anchor: T.nilable(String)).returns(T.nilable(String)) }
        def billing_cycle_anchor=(_billing_cycle_anchor); end
        # Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds.
        sig {
          returns(T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::BillingThresholds)))
         }
        def billing_thresholds; end
        sig {
          params(_billing_thresholds: T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::BillingThresholds))).returns(T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::BillingThresholds)))
         }
        def billing_thresholds=(_billing_thresholds); end
        # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically` on creation.
        sig { returns(T.nilable(String)) }
        def collection_method; end
        sig { params(_collection_method: T.nilable(String)).returns(T.nilable(String)) }
        def collection_method=(_collection_method); end
        # ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
        sig { returns(T.nilable(String)) }
        def default_payment_method; end
        sig { params(_default_payment_method: T.nilable(String)).returns(T.nilable(String)) }
        def default_payment_method=(_default_payment_method); end
        # Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
        sig { returns(T.nilable(String)) }
        def description; end
        sig { params(_description: T.nilable(String)).returns(T.nilable(String)) }
        def description=(_description); end
        # All invoices will be billed using the specified settings.
        sig {
          returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::InvoiceSettings))
         }
        def invoice_settings; end
        sig {
          params(_invoice_settings: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::InvoiceSettings)).returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::InvoiceSettings))
         }
        def invoice_settings=(_invoice_settings); end
        # The account on behalf of which to charge, for each of the associated subscription's invoices.
        sig { returns(T.nilable(String)) }
        def on_behalf_of; end
        sig { params(_on_behalf_of: T.nilable(String)).returns(T.nilable(String)) }
        def on_behalf_of=(_on_behalf_of); end
        # The data with which to automatically create a Transfer for each of the associated subscription's invoices.
        sig {
          returns(T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::TransferData)))
         }
        def transfer_data; end
        sig {
          params(_transfer_data: T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::TransferData))).returns(T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::TransferData)))
         }
        def transfer_data=(_transfer_data); end
        sig {
          params(application_fee_percent: T.nilable(Float), automatic_tax: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::AutomaticTax), billing_cycle_anchor: T.nilable(String), billing_thresholds: T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::BillingThresholds)), collection_method: T.nilable(String), default_payment_method: T.nilable(String), description: T.nilable(String), invoice_settings: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::InvoiceSettings), on_behalf_of: T.nilable(String), transfer_data: T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings::TransferData))).void
         }
        def initialize(
          application_fee_percent: nil,
          automatic_tax: nil,
          billing_cycle_anchor: nil,
          billing_thresholds: nil,
          collection_method: nil,
          default_payment_method: nil,
          description: nil,
          invoice_settings: nil,
          on_behalf_of: nil,
          transfer_data: nil
        ); end
      end
      class Phase < Stripe::RequestParams
        class AddInvoiceItem < Stripe::RequestParams
          class Discount < Stripe::RequestParams
            # ID of the coupon to create a new discount for.
            sig { returns(T.nilable(String)) }
            def coupon; end
            sig { params(_coupon: T.nilable(String)).returns(T.nilable(String)) }
            def coupon=(_coupon); end
            # ID of an existing discount on the object (or one of its ancestors) to reuse.
            sig { returns(T.nilable(String)) }
            def discount; end
            sig { params(_discount: T.nilable(String)).returns(T.nilable(String)) }
            def discount=(_discount); end
            # ID of the promotion code to create a new discount for.
            sig { returns(T.nilable(String)) }
            def promotion_code; end
            sig { params(_promotion_code: T.nilable(String)).returns(T.nilable(String)) }
            def promotion_code=(_promotion_code); end
            sig {
              params(coupon: T.nilable(String), discount: T.nilable(String), promotion_code: T.nilable(String)).void
             }
            def initialize(coupon: nil, discount: nil, promotion_code: nil); end
          end
          class Period < Stripe::RequestParams
            class End < Stripe::RequestParams
              # A precise Unix timestamp for the end of the invoice item period. Must be greater than or equal to `period.start`.
              sig { returns(T.nilable(Integer)) }
              def timestamp; end
              sig { params(_timestamp: T.nilable(Integer)).returns(T.nilable(Integer)) }
              def timestamp=(_timestamp); end
              # Select how to calculate the end of the invoice item period.
              sig { returns(String) }
              def type; end
              sig { params(_type: String).returns(String) }
              def type=(_type); end
              sig { params(timestamp: T.nilable(Integer), type: String).void }
              def initialize(timestamp: nil, type: nil); end
            end
            class Start < Stripe::RequestParams
              # A precise Unix timestamp for the start of the invoice item period. Must be less than or equal to `period.end`.
              sig { returns(T.nilable(Integer)) }
              def timestamp; end
              sig { params(_timestamp: T.nilable(Integer)).returns(T.nilable(Integer)) }
              def timestamp=(_timestamp); end
              # Select how to calculate the start of the invoice item period.
              sig { returns(String) }
              def type; end
              sig { params(_type: String).returns(String) }
              def type=(_type); end
              sig { params(timestamp: T.nilable(Integer), type: String).void }
              def initialize(timestamp: nil, type: nil); end
            end
            # End of the invoice item period.
            sig {
              returns(::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::Period::End)
             }
            def end; end
            sig {
              params(_end: ::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::Period::End).returns(::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::Period::End)
             }
            def end=(_end); end
            # Start of the invoice item period.
            sig {
              returns(::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::Period::Start)
             }
            def start; end
            sig {
              params(_start: ::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::Period::Start).returns(::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::Period::Start)
             }
            def start=(_start); end
            sig {
              params(end_: ::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::Period::End, start: ::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::Period::Start).void
             }
            def initialize(end_: nil, start: nil); end
          end
          class PriceData < Stripe::RequestParams
            # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
            sig { returns(String) }
            def currency; end
            sig { params(_currency: String).returns(String) }
            def currency=(_currency); end
            # The ID of the [Product](https://docs.stripe.com/api/products) that this [Price](https://docs.stripe.com/api/prices) will belong to.
            sig { returns(String) }
            def product; end
            sig { params(_product: String).returns(String) }
            def product=(_product); end
            # Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
            sig { returns(T.nilable(String)) }
            def tax_behavior; end
            sig { params(_tax_behavior: T.nilable(String)).returns(T.nilable(String)) }
            def tax_behavior=(_tax_behavior); end
            # A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge or a negative integer representing the amount to credit to the customer.
            sig { returns(T.nilable(Integer)) }
            def unit_amount; end
            sig { params(_unit_amount: T.nilable(Integer)).returns(T.nilable(Integer)) }
            def unit_amount=(_unit_amount); end
            # Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
            sig { returns(T.nilable(String)) }
            def unit_amount_decimal; end
            sig { params(_unit_amount_decimal: T.nilable(String)).returns(T.nilable(String)) }
            def unit_amount_decimal=(_unit_amount_decimal); end
            sig {
              params(currency: String, product: String, tax_behavior: T.nilable(String), unit_amount: T.nilable(Integer), unit_amount_decimal: T.nilable(String)).void
             }
            def initialize(
              currency: nil,
              product: nil,
              tax_behavior: nil,
              unit_amount: nil,
              unit_amount_decimal: nil
            ); end
          end
          # The coupons to redeem into discounts for the item.
          sig {
            returns(T.nilable(T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::Discount]))
           }
          def discounts; end
          sig {
            params(_discounts: T.nilable(T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::Discount])).returns(T.nilable(T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::Discount]))
           }
          def discounts=(_discounts); end
          # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
          sig { returns(T.nilable(T::Hash[String, String])) }
          def metadata; end
          sig {
            params(_metadata: T.nilable(T::Hash[String, String])).returns(T.nilable(T::Hash[String, String]))
           }
          def metadata=(_metadata); end
          # The period associated with this invoice item. Defaults to the period of the underlying subscription that surrounds the start of the phase.
          sig {
            returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::Period))
           }
          def period; end
          sig {
            params(_period: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::Period)).returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::Period))
           }
          def period=(_period); end
          # The ID of the price object. One of `price` or `price_data` is required.
          sig { returns(T.nilable(String)) }
          def price; end
          sig { params(_price: T.nilable(String)).returns(T.nilable(String)) }
          def price=(_price); end
          # Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. One of `price` or `price_data` is required.
          sig {
            returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::PriceData))
           }
          def price_data; end
          sig {
            params(_price_data: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::PriceData)).returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::PriceData))
           }
          def price_data=(_price_data); end
          # Quantity for this item. Defaults to 1.
          sig { returns(T.nilable(Integer)) }
          def quantity; end
          sig { params(_quantity: T.nilable(Integer)).returns(T.nilable(Integer)) }
          def quantity=(_quantity); end
          # The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item.
          sig { returns(T.nilable(T.any(String, T::Array[String]))) }
          def tax_rates; end
          sig {
            params(_tax_rates: T.nilable(T.any(String, T::Array[String]))).returns(T.nilable(T.any(String, T::Array[String])))
           }
          def tax_rates=(_tax_rates); end
          sig {
            params(discounts: T.nilable(T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::Discount]), metadata: T.nilable(T::Hash[String, String]), period: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::Period), price: T.nilable(String), price_data: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem::PriceData), quantity: T.nilable(Integer), tax_rates: T.nilable(T.any(String, T::Array[String]))).void
           }
          def initialize(
            discounts: nil,
            metadata: nil,
            period: nil,
            price: nil,
            price_data: nil,
            quantity: nil,
            tax_rates: nil
          ); end
        end
        class AutomaticTax < Stripe::RequestParams
          class Liability < Stripe::RequestParams
            # The connected account being referenced when `type` is `account`.
            sig { returns(T.nilable(String)) }
            def account; end
            sig { params(_account: T.nilable(String)).returns(T.nilable(String)) }
            def account=(_account); end
            # Type of the account referenced in the request.
            sig { returns(String) }
            def type; end
            sig { params(_type: String).returns(String) }
            def type=(_type); end
            sig { params(account: T.nilable(String), type: String).void }
            def initialize(account: nil, type: nil); end
          end
          # Enabled automatic tax calculation which will automatically compute tax rates on all invoices generated by the subscription.
          sig { returns(T::Boolean) }
          def enabled; end
          sig { params(_enabled: T::Boolean).returns(T::Boolean) }
          def enabled=(_enabled); end
          # The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
          sig {
            returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::AutomaticTax::Liability))
           }
          def liability; end
          sig {
            params(_liability: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::AutomaticTax::Liability)).returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::AutomaticTax::Liability))
           }
          def liability=(_liability); end
          sig {
            params(enabled: T::Boolean, liability: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::AutomaticTax::Liability)).void
           }
          def initialize(enabled: nil, liability: nil); end
        end
        class BillingThresholds < Stripe::RequestParams
          # Monetary threshold that triggers the subscription to advance to a new billing period
          sig { returns(T.nilable(Integer)) }
          def amount_gte; end
          sig { params(_amount_gte: T.nilable(Integer)).returns(T.nilable(Integer)) }
          def amount_gte=(_amount_gte); end
          # Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged.
          sig { returns(T.nilable(T::Boolean)) }
          def reset_billing_cycle_anchor; end
          sig {
            params(_reset_billing_cycle_anchor: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean))
           }
          def reset_billing_cycle_anchor=(_reset_billing_cycle_anchor); end
          sig {
            params(amount_gte: T.nilable(Integer), reset_billing_cycle_anchor: T.nilable(T::Boolean)).void
           }
          def initialize(amount_gte: nil, reset_billing_cycle_anchor: nil); end
        end
        class Discount < Stripe::RequestParams
          # ID of the coupon to create a new discount for.
          sig { returns(T.nilable(String)) }
          def coupon; end
          sig { params(_coupon: T.nilable(String)).returns(T.nilable(String)) }
          def coupon=(_coupon); end
          # ID of an existing discount on the object (or one of its ancestors) to reuse.
          sig { returns(T.nilable(String)) }
          def discount; end
          sig { params(_discount: T.nilable(String)).returns(T.nilable(String)) }
          def discount=(_discount); end
          # ID of the promotion code to create a new discount for.
          sig { returns(T.nilable(String)) }
          def promotion_code; end
          sig { params(_promotion_code: T.nilable(String)).returns(T.nilable(String)) }
          def promotion_code=(_promotion_code); end
          sig {
            params(coupon: T.nilable(String), discount: T.nilable(String), promotion_code: T.nilable(String)).void
           }
          def initialize(coupon: nil, discount: nil, promotion_code: nil); end
        end
        class Duration < Stripe::RequestParams
          # Specifies phase duration. Either `day`, `week`, `month` or `year`.
          sig { returns(String) }
          def interval; end
          sig { params(_interval: String).returns(String) }
          def interval=(_interval); end
          # The multiplier applied to the interval.
          sig { returns(T.nilable(Integer)) }
          def interval_count; end
          sig { params(_interval_count: T.nilable(Integer)).returns(T.nilable(Integer)) }
          def interval_count=(_interval_count); end
          sig { params(interval: String, interval_count: T.nilable(Integer)).void }
          def initialize(interval: nil, interval_count: nil); end
        end
        class InvoiceSettings < Stripe::RequestParams
          class Issuer < Stripe::RequestParams
            # The connected account being referenced when `type` is `account`.
            sig { returns(T.nilable(String)) }
            def account; end
            sig { params(_account: T.nilable(String)).returns(T.nilable(String)) }
            def account=(_account); end
            # Type of the account referenced in the request.
            sig { returns(String) }
            def type; end
            sig { params(_type: String).returns(String) }
            def type=(_type); end
            sig { params(account: T.nilable(String), type: String).void }
            def initialize(account: nil, type: nil); end
          end
          # The account tax IDs associated with this phase of the subscription schedule. Will be set on invoices generated by this phase of the subscription schedule.
          sig { returns(T.nilable(T.any(String, T::Array[String]))) }
          def account_tax_ids; end
          sig {
            params(_account_tax_ids: T.nilable(T.any(String, T::Array[String]))).returns(T.nilable(T.any(String, T::Array[String])))
           }
          def account_tax_ids=(_account_tax_ids); end
          # Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
          sig { returns(T.nilable(Integer)) }
          def days_until_due; end
          sig { params(_days_until_due: T.nilable(Integer)).returns(T.nilable(Integer)) }
          def days_until_due=(_days_until_due); end
          # The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
          sig {
            returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::InvoiceSettings::Issuer))
           }
          def issuer; end
          sig {
            params(_issuer: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::InvoiceSettings::Issuer)).returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::InvoiceSettings::Issuer))
           }
          def issuer=(_issuer); end
          sig {
            params(account_tax_ids: T.nilable(T.any(String, T::Array[String])), days_until_due: T.nilable(Integer), issuer: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::InvoiceSettings::Issuer)).void
           }
          def initialize(account_tax_ids: nil, days_until_due: nil, issuer: nil); end
        end
        class Item < Stripe::RequestParams
          class BillingThresholds < Stripe::RequestParams
            # Number of units that meets the billing threshold to advance the subscription to a new billing period (e.g., it takes 10 $5 units to meet a $50 [monetary threshold](https://stripe.com/docs/api/subscriptions/update#update_subscription-billing_thresholds-amount_gte))
            sig { returns(Integer) }
            def usage_gte; end
            sig { params(_usage_gte: Integer).returns(Integer) }
            def usage_gte=(_usage_gte); end
            sig { params(usage_gte: Integer).void }
            def initialize(usage_gte: nil); end
          end
          class Discount < Stripe::RequestParams
            # ID of the coupon to create a new discount for.
            sig { returns(T.nilable(String)) }
            def coupon; end
            sig { params(_coupon: T.nilable(String)).returns(T.nilable(String)) }
            def coupon=(_coupon); end
            # ID of an existing discount on the object (or one of its ancestors) to reuse.
            sig { returns(T.nilable(String)) }
            def discount; end
            sig { params(_discount: T.nilable(String)).returns(T.nilable(String)) }
            def discount=(_discount); end
            # ID of the promotion code to create a new discount for.
            sig { returns(T.nilable(String)) }
            def promotion_code; end
            sig { params(_promotion_code: T.nilable(String)).returns(T.nilable(String)) }
            def promotion_code=(_promotion_code); end
            sig {
              params(coupon: T.nilable(String), discount: T.nilable(String), promotion_code: T.nilable(String)).void
             }
            def initialize(coupon: nil, discount: nil, promotion_code: nil); end
          end
          class PriceData < Stripe::RequestParams
            class Recurring < Stripe::RequestParams
              # Specifies billing frequency. Either `day`, `week`, `month` or `year`.
              sig { returns(String) }
              def interval; end
              sig { params(_interval: String).returns(String) }
              def interval=(_interval); end
              # The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of three years interval allowed (3 years, 36 months, or 156 weeks).
              sig { returns(T.nilable(Integer)) }
              def interval_count; end
              sig { params(_interval_count: T.nilable(Integer)).returns(T.nilable(Integer)) }
              def interval_count=(_interval_count); end
              sig { params(interval: String, interval_count: T.nilable(Integer)).void }
              def initialize(interval: nil, interval_count: nil); end
            end
            # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
            sig { returns(String) }
            def currency; end
            sig { params(_currency: String).returns(String) }
            def currency=(_currency); end
            # The ID of the [Product](https://docs.stripe.com/api/products) that this [Price](https://docs.stripe.com/api/prices) will belong to.
            sig { returns(String) }
            def product; end
            sig { params(_product: String).returns(String) }
            def product=(_product); end
            # The recurring components of a price such as `interval` and `interval_count`.
            sig {
              returns(::Stripe::SubscriptionSchedule::CreateParams::Phase::Item::PriceData::Recurring)
             }
            def recurring; end
            sig {
              params(_recurring: ::Stripe::SubscriptionSchedule::CreateParams::Phase::Item::PriceData::Recurring).returns(::Stripe::SubscriptionSchedule::CreateParams::Phase::Item::PriceData::Recurring)
             }
            def recurring=(_recurring); end
            # Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
            sig { returns(T.nilable(String)) }
            def tax_behavior; end
            sig { params(_tax_behavior: T.nilable(String)).returns(T.nilable(String)) }
            def tax_behavior=(_tax_behavior); end
            # A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
            sig { returns(T.nilable(Integer)) }
            def unit_amount; end
            sig { params(_unit_amount: T.nilable(Integer)).returns(T.nilable(Integer)) }
            def unit_amount=(_unit_amount); end
            # Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
            sig { returns(T.nilable(String)) }
            def unit_amount_decimal; end
            sig { params(_unit_amount_decimal: T.nilable(String)).returns(T.nilable(String)) }
            def unit_amount_decimal=(_unit_amount_decimal); end
            sig {
              params(currency: String, product: String, recurring: ::Stripe::SubscriptionSchedule::CreateParams::Phase::Item::PriceData::Recurring, tax_behavior: T.nilable(String), unit_amount: T.nilable(Integer), unit_amount_decimal: T.nilable(String)).void
             }
            def initialize(
              currency: nil,
              product: nil,
              recurring: nil,
              tax_behavior: nil,
              unit_amount: nil,
              unit_amount_decimal: nil
            ); end
          end
          # Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds.
          sig {
            returns(T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::CreateParams::Phase::Item::BillingThresholds)))
           }
          def billing_thresholds; end
          sig {
            params(_billing_thresholds: T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::CreateParams::Phase::Item::BillingThresholds))).returns(T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::CreateParams::Phase::Item::BillingThresholds)))
           }
          def billing_thresholds=(_billing_thresholds); end
          # The coupons to redeem into discounts for the subscription item.
          sig {
            returns(T.nilable(T.any(String, T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::Item::Discount])))
           }
          def discounts; end
          sig {
            params(_discounts: T.nilable(T.any(String, T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::Item::Discount]))).returns(T.nilable(T.any(String, T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::Item::Discount])))
           }
          def discounts=(_discounts); end
          # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a configuration item. Metadata on a configuration item will update the underlying subscription item's `metadata` when the phase is entered, adding new keys and replacing existing keys. Individual keys in the subscription item's `metadata` can be unset by posting an empty value to them in the configuration item's `metadata`. To unset all keys in the subscription item's `metadata`, update the subscription item directly or unset every key individually from the configuration item's `metadata`.
          sig { returns(T.nilable(T::Hash[String, String])) }
          def metadata; end
          sig {
            params(_metadata: T.nilable(T::Hash[String, String])).returns(T.nilable(T::Hash[String, String]))
           }
          def metadata=(_metadata); end
          # The plan ID to subscribe to. You may specify the same ID in `plan` and `price`.
          sig { returns(T.nilable(String)) }
          def plan; end
          sig { params(_plan: T.nilable(String)).returns(T.nilable(String)) }
          def plan=(_plan); end
          # The ID of the price object.
          sig { returns(T.nilable(String)) }
          def price; end
          sig { params(_price: T.nilable(String)).returns(T.nilable(String)) }
          def price=(_price); end
          # Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline.
          sig {
            returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::Item::PriceData))
           }
          def price_data; end
          sig {
            params(_price_data: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::Item::PriceData)).returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::Item::PriceData))
           }
          def price_data=(_price_data); end
          # Quantity for the given price. Can be set only if the price's `usage_type` is `licensed` and not `metered`.
          sig { returns(T.nilable(Integer)) }
          def quantity; end
          sig { params(_quantity: T.nilable(Integer)).returns(T.nilable(Integer)) }
          def quantity=(_quantity); end
          # A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates.
          sig { returns(T.nilable(T.any(String, T::Array[String]))) }
          def tax_rates; end
          sig {
            params(_tax_rates: T.nilable(T.any(String, T::Array[String]))).returns(T.nilable(T.any(String, T::Array[String])))
           }
          def tax_rates=(_tax_rates); end
          sig {
            params(billing_thresholds: T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::CreateParams::Phase::Item::BillingThresholds)), discounts: T.nilable(T.any(String, T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::Item::Discount])), metadata: T.nilable(T::Hash[String, String]), plan: T.nilable(String), price: T.nilable(String), price_data: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::Item::PriceData), quantity: T.nilable(Integer), tax_rates: T.nilable(T.any(String, T::Array[String]))).void
           }
          def initialize(
            billing_thresholds: nil,
            discounts: nil,
            metadata: nil,
            plan: nil,
            price: nil,
            price_data: nil,
            quantity: nil,
            tax_rates: nil
          ); end
        end
        class TransferData < Stripe::RequestParams
          # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
          sig { returns(T.nilable(Float)) }
          def amount_percent; end
          sig { params(_amount_percent: T.nilable(Float)).returns(T.nilable(Float)) }
          def amount_percent=(_amount_percent); end
          # ID of an existing, connected Stripe account.
          sig { returns(String) }
          def destination; end
          sig { params(_destination: String).returns(String) }
          def destination=(_destination); end
          sig { params(amount_percent: T.nilable(Float), destination: String).void }
          def initialize(amount_percent: nil, destination: nil); end
        end
        # A list of prices and quantities that will generate invoice items appended to the next invoice for this phase. You may pass up to 20 items.
        sig {
          returns(T.nilable(T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem]))
         }
        def add_invoice_items; end
        sig {
          params(_add_invoice_items: T.nilable(T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem])).returns(T.nilable(T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem]))
         }
        def add_invoice_items=(_add_invoice_items); end
        # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions).
        sig { returns(T.nilable(Float)) }
        def application_fee_percent; end
        sig { params(_application_fee_percent: T.nilable(Float)).returns(T.nilable(Float)) }
        def application_fee_percent=(_application_fee_percent); end
        # Automatic tax settings for this phase.
        sig {
          returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::AutomaticTax))
         }
        def automatic_tax; end
        sig {
          params(_automatic_tax: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::AutomaticTax)).returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::AutomaticTax))
         }
        def automatic_tax=(_automatic_tax); end
        # Can be set to `phase_start` to set the anchor to the start of the phase or `automatic` to automatically change it if needed. Cannot be set to `phase_start` if this phase specifies a trial. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
        sig { returns(T.nilable(String)) }
        def billing_cycle_anchor; end
        sig { params(_billing_cycle_anchor: T.nilable(String)).returns(T.nilable(String)) }
        def billing_cycle_anchor=(_billing_cycle_anchor); end
        # Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds.
        sig {
          returns(T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::CreateParams::Phase::BillingThresholds)))
         }
        def billing_thresholds; end
        sig {
          params(_billing_thresholds: T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::CreateParams::Phase::BillingThresholds))).returns(T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::CreateParams::Phase::BillingThresholds)))
         }
        def billing_thresholds=(_billing_thresholds); end
        # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically` on creation.
        sig { returns(T.nilable(String)) }
        def collection_method; end
        sig { params(_collection_method: T.nilable(String)).returns(T.nilable(String)) }
        def collection_method=(_collection_method); end
        # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        sig { returns(T.nilable(String)) }
        def currency; end
        sig { params(_currency: T.nilable(String)).returns(T.nilable(String)) }
        def currency=(_currency); end
        # ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
        sig { returns(T.nilable(String)) }
        def default_payment_method; end
        sig { params(_default_payment_method: T.nilable(String)).returns(T.nilable(String)) }
        def default_payment_method=(_default_payment_method); end
        # A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will set the Subscription's [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates), which means they will be the Invoice's [`default_tax_rates`](https://stripe.com/docs/api/invoices/create#create_invoice-default_tax_rates) for any Invoices issued by the Subscription during this Phase.
        sig { returns(T.nilable(T.any(String, T::Array[String]))) }
        def default_tax_rates; end
        sig {
          params(_default_tax_rates: T.nilable(T.any(String, T::Array[String]))).returns(T.nilable(T.any(String, T::Array[String])))
         }
        def default_tax_rates=(_default_tax_rates); end
        # Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
        sig { returns(T.nilable(String)) }
        def description; end
        sig { params(_description: T.nilable(String)).returns(T.nilable(String)) }
        def description=(_description); end
        # The coupons to redeem into discounts for the schedule phase. If not specified, inherits the discount from the subscription's customer. Pass an empty string to avoid inheriting any discounts.
        sig {
          returns(T.nilable(T.any(String, T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::Discount])))
         }
        def discounts; end
        sig {
          params(_discounts: T.nilable(T.any(String, T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::Discount]))).returns(T.nilable(T.any(String, T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::Discount])))
         }
        def discounts=(_discounts); end
        # The number of intervals the phase should last. If set, `end_date` must not be set.
        sig { returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::Duration)) }
        def duration; end
        sig {
          params(_duration: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::Duration)).returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::Duration))
         }
        def duration=(_duration); end
        # The date at which this phase of the subscription schedule ends. If set, `iterations` must not be set.
        sig { returns(T.nilable(Integer)) }
        def end_date; end
        sig { params(_end_date: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def end_date=(_end_date); end
        # All invoices will be billed using the specified settings.
        sig {
          returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::InvoiceSettings))
         }
        def invoice_settings; end
        sig {
          params(_invoice_settings: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::InvoiceSettings)).returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::InvoiceSettings))
         }
        def invoice_settings=(_invoice_settings); end
        # List of configuration items, each with an attached price, to apply during this phase of the subscription schedule.
        sig { returns(T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::Item]) }
        def items; end
        sig {
          params(_items: T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::Item]).returns(T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::Item])
         }
        def items=(_items); end
        # Integer representing the multiplier applied to the price interval. For example, `iterations=2` applied to a price with `interval=month` and `interval_count=3` results in a phase of duration `2 * 3 months = 6 months`. If set, `end_date` must not be set. This parameter is deprecated and will be removed in a future version. Use `duration` instead.
        sig { returns(T.nilable(Integer)) }
        def iterations; end
        sig { params(_iterations: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def iterations=(_iterations); end
        # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a phase. Metadata on a schedule's phase will update the underlying subscription's `metadata` when the phase is entered, adding new keys and replacing existing keys in the subscription's `metadata`. Individual keys in the subscription's `metadata` can be unset by posting an empty value to them in the phase's `metadata`. To unset all keys in the subscription's `metadata`, update the subscription directly or unset every key individually from the phase's `metadata`.
        sig { returns(T.nilable(T::Hash[String, String])) }
        def metadata; end
        sig {
          params(_metadata: T.nilable(T::Hash[String, String])).returns(T.nilable(T::Hash[String, String]))
         }
        def metadata=(_metadata); end
        # The account on behalf of which to charge, for each of the associated subscription's invoices.
        sig { returns(T.nilable(String)) }
        def on_behalf_of; end
        sig { params(_on_behalf_of: T.nilable(String)).returns(T.nilable(String)) }
        def on_behalf_of=(_on_behalf_of); end
        # Controls whether the subscription schedule should create [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when transitioning to this phase if there is a difference in billing configuration. It's different from the request-level [proration_behavior](https://stripe.com/docs/api/subscription_schedules/update#update_subscription_schedule-proration_behavior) parameter which controls what happens if the update request affects the billing configuration (item price, quantity, etc.) of the current phase.
        sig { returns(T.nilable(String)) }
        def proration_behavior; end
        sig { params(_proration_behavior: T.nilable(String)).returns(T.nilable(String)) }
        def proration_behavior=(_proration_behavior); end
        # The data with which to automatically create a Transfer for each of the associated subscription's invoices.
        sig {
          returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::TransferData))
         }
        def transfer_data; end
        sig {
          params(_transfer_data: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::TransferData)).returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::TransferData))
         }
        def transfer_data=(_transfer_data); end
        # If set to true the entire phase is counted as a trial and the customer will not be charged for any fees.
        sig { returns(T.nilable(T::Boolean)) }
        def trial; end
        sig { params(_trial: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
        def trial=(_trial); end
        # Sets the phase to trialing from the start date to this date. Must be before the phase end date, can not be combined with `trial`
        sig { returns(T.nilable(Integer)) }
        def trial_end; end
        sig { params(_trial_end: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def trial_end=(_trial_end); end
        sig {
          params(add_invoice_items: T.nilable(T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::AddInvoiceItem]), application_fee_percent: T.nilable(Float), automatic_tax: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::AutomaticTax), billing_cycle_anchor: T.nilable(String), billing_thresholds: T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::CreateParams::Phase::BillingThresholds)), collection_method: T.nilable(String), currency: T.nilable(String), default_payment_method: T.nilable(String), default_tax_rates: T.nilable(T.any(String, T::Array[String])), description: T.nilable(String), discounts: T.nilable(T.any(String, T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::Discount])), duration: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::Duration), end_date: T.nilable(Integer), invoice_settings: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::InvoiceSettings), items: T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase::Item], iterations: T.nilable(Integer), metadata: T.nilable(T::Hash[String, String]), on_behalf_of: T.nilable(String), proration_behavior: T.nilable(String), transfer_data: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::Phase::TransferData), trial: T.nilable(T::Boolean), trial_end: T.nilable(Integer)).void
         }
        def initialize(
          add_invoice_items: nil,
          application_fee_percent: nil,
          automatic_tax: nil,
          billing_cycle_anchor: nil,
          billing_thresholds: nil,
          collection_method: nil,
          currency: nil,
          default_payment_method: nil,
          default_tax_rates: nil,
          description: nil,
          discounts: nil,
          duration: nil,
          end_date: nil,
          invoice_settings: nil,
          items: nil,
          iterations: nil,
          metadata: nil,
          on_behalf_of: nil,
          proration_behavior: nil,
          transfer_data: nil,
          trial: nil,
          trial_end: nil
        ); end
      end
      # Controls how prorations and invoices for subscriptions are calculated and orchestrated.
      sig { returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::BillingMode)) }
      def billing_mode; end
      sig {
        params(_billing_mode: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::BillingMode)).returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::BillingMode))
       }
      def billing_mode=(_billing_mode); end
      # The identifier of the customer to create the subscription schedule for.
      sig { returns(T.nilable(String)) }
      def customer; end
      sig { params(_customer: T.nilable(String)).returns(T.nilable(String)) }
      def customer=(_customer); end
      # Object representing the subscription schedule's default settings.
      sig { returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings)) }
      def default_settings; end
      sig {
        params(_default_settings: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings)).returns(T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings))
       }
      def default_settings=(_default_settings); end
      # Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription.
      sig { returns(T.nilable(String)) }
      def end_behavior; end
      sig { params(_end_behavior: T.nilable(String)).returns(T.nilable(String)) }
      def end_behavior=(_end_behavior); end
      # Specifies which fields in the response should be expanded.
      sig { returns(T.nilable(T::Array[String])) }
      def expand; end
      sig { params(_expand: T.nilable(T::Array[String])).returns(T.nilable(T::Array[String])) }
      def expand=(_expand); end
      # Migrate an existing subscription to be managed by a subscription schedule. If this parameter is set, a subscription schedule will be created using the subscription's item(s), set to auto-renew using the subscription's interval. When using this parameter, other parameters (such as phase values) cannot be set. To create a subscription schedule with other modifications, we recommend making two separate API calls.
      sig { returns(T.nilable(String)) }
      def from_subscription; end
      sig { params(_from_subscription: T.nilable(String)).returns(T.nilable(String)) }
      def from_subscription=(_from_subscription); end
      # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
      sig { returns(T.nilable(T.any(String, T::Hash[String, String]))) }
      def metadata; end
      sig {
        params(_metadata: T.nilable(T.any(String, T::Hash[String, String]))).returns(T.nilable(T.any(String, T::Hash[String, String])))
       }
      def metadata=(_metadata); end
      # List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase.
      sig { returns(T.nilable(T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase])) }
      def phases; end
      sig {
        params(_phases: T.nilable(T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase])).returns(T.nilable(T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase]))
       }
      def phases=(_phases); end
      # When the subscription schedule starts. We recommend using `now` so that it starts the subscription immediately. You can also use a Unix timestamp to backdate the subscription so that it starts on a past date, or set a future date for the subscription to start on.
      sig { returns(T.nilable(T.any(Integer, String))) }
      def start_date; end
      sig {
        params(_start_date: T.nilable(T.any(Integer, String))).returns(T.nilable(T.any(Integer, String)))
       }
      def start_date=(_start_date); end
      sig {
        params(billing_mode: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::BillingMode), customer: T.nilable(String), default_settings: T.nilable(::Stripe::SubscriptionSchedule::CreateParams::DefaultSettings), end_behavior: T.nilable(String), expand: T.nilable(T::Array[String]), from_subscription: T.nilable(String), metadata: T.nilable(T.any(String, T::Hash[String, String])), phases: T.nilable(T::Array[::Stripe::SubscriptionSchedule::CreateParams::Phase]), start_date: T.nilable(T.any(Integer, String))).void
       }
      def initialize(
        billing_mode: nil,
        customer: nil,
        default_settings: nil,
        end_behavior: nil,
        expand: nil,
        from_subscription: nil,
        metadata: nil,
        phases: nil,
        start_date: nil
      ); end
    end
    class UpdateParams < Stripe::RequestParams
      class DefaultSettings < Stripe::RequestParams
        class AutomaticTax < Stripe::RequestParams
          class Liability < Stripe::RequestParams
            # The connected account being referenced when `type` is `account`.
            sig { returns(T.nilable(String)) }
            def account; end
            sig { params(_account: T.nilable(String)).returns(T.nilable(String)) }
            def account=(_account); end
            # Type of the account referenced in the request.
            sig { returns(String) }
            def type; end
            sig { params(_type: String).returns(String) }
            def type=(_type); end
            sig { params(account: T.nilable(String), type: String).void }
            def initialize(account: nil, type: nil); end
          end
          # Enabled automatic tax calculation which will automatically compute tax rates on all invoices generated by the subscription.
          sig { returns(T::Boolean) }
          def enabled; end
          sig { params(_enabled: T::Boolean).returns(T::Boolean) }
          def enabled=(_enabled); end
          # The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
          sig {
            returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::AutomaticTax::Liability))
           }
          def liability; end
          sig {
            params(_liability: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::AutomaticTax::Liability)).returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::AutomaticTax::Liability))
           }
          def liability=(_liability); end
          sig {
            params(enabled: T::Boolean, liability: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::AutomaticTax::Liability)).void
           }
          def initialize(enabled: nil, liability: nil); end
        end
        class BillingThresholds < Stripe::RequestParams
          # Monetary threshold that triggers the subscription to advance to a new billing period
          sig { returns(T.nilable(Integer)) }
          def amount_gte; end
          sig { params(_amount_gte: T.nilable(Integer)).returns(T.nilable(Integer)) }
          def amount_gte=(_amount_gte); end
          # Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged.
          sig { returns(T.nilable(T::Boolean)) }
          def reset_billing_cycle_anchor; end
          sig {
            params(_reset_billing_cycle_anchor: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean))
           }
          def reset_billing_cycle_anchor=(_reset_billing_cycle_anchor); end
          sig {
            params(amount_gte: T.nilable(Integer), reset_billing_cycle_anchor: T.nilable(T::Boolean)).void
           }
          def initialize(amount_gte: nil, reset_billing_cycle_anchor: nil); end
        end
        class InvoiceSettings < Stripe::RequestParams
          class Issuer < Stripe::RequestParams
            # The connected account being referenced when `type` is `account`.
            sig { returns(T.nilable(String)) }
            def account; end
            sig { params(_account: T.nilable(String)).returns(T.nilable(String)) }
            def account=(_account); end
            # Type of the account referenced in the request.
            sig { returns(String) }
            def type; end
            sig { params(_type: String).returns(String) }
            def type=(_type); end
            sig { params(account: T.nilable(String), type: String).void }
            def initialize(account: nil, type: nil); end
          end
          # The account tax IDs associated with the subscription schedule. Will be set on invoices generated by the subscription schedule.
          sig { returns(T.nilable(T.any(String, T::Array[String]))) }
          def account_tax_ids; end
          sig {
            params(_account_tax_ids: T.nilable(T.any(String, T::Array[String]))).returns(T.nilable(T.any(String, T::Array[String])))
           }
          def account_tax_ids=(_account_tax_ids); end
          # Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `collection_method=charge_automatically`.
          sig { returns(T.nilable(Integer)) }
          def days_until_due; end
          sig { params(_days_until_due: T.nilable(Integer)).returns(T.nilable(Integer)) }
          def days_until_due=(_days_until_due); end
          # The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
          sig {
            returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::InvoiceSettings::Issuer))
           }
          def issuer; end
          sig {
            params(_issuer: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::InvoiceSettings::Issuer)).returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::InvoiceSettings::Issuer))
           }
          def issuer=(_issuer); end
          sig {
            params(account_tax_ids: T.nilable(T.any(String, T::Array[String])), days_until_due: T.nilable(Integer), issuer: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::InvoiceSettings::Issuer)).void
           }
          def initialize(account_tax_ids: nil, days_until_due: nil, issuer: nil); end
        end
        class TransferData < Stripe::RequestParams
          # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
          sig { returns(T.nilable(Float)) }
          def amount_percent; end
          sig { params(_amount_percent: T.nilable(Float)).returns(T.nilable(Float)) }
          def amount_percent=(_amount_percent); end
          # ID of an existing, connected Stripe account.
          sig { returns(String) }
          def destination; end
          sig { params(_destination: String).returns(String) }
          def destination=(_destination); end
          sig { params(amount_percent: T.nilable(Float), destination: String).void }
          def initialize(amount_percent: nil, destination: nil); end
        end
        # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions).
        sig { returns(T.nilable(Float)) }
        def application_fee_percent; end
        sig { params(_application_fee_percent: T.nilable(Float)).returns(T.nilable(Float)) }
        def application_fee_percent=(_application_fee_percent); end
        # Default settings for automatic tax computation.
        sig {
          returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::AutomaticTax))
         }
        def automatic_tax; end
        sig {
          params(_automatic_tax: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::AutomaticTax)).returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::AutomaticTax))
         }
        def automatic_tax=(_automatic_tax); end
        # Can be set to `phase_start` to set the anchor to the start of the phase or `automatic` to automatically change it if needed. Cannot be set to `phase_start` if this phase specifies a trial. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
        sig { returns(T.nilable(String)) }
        def billing_cycle_anchor; end
        sig { params(_billing_cycle_anchor: T.nilable(String)).returns(T.nilable(String)) }
        def billing_cycle_anchor=(_billing_cycle_anchor); end
        # Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds.
        sig {
          returns(T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::BillingThresholds)))
         }
        def billing_thresholds; end
        sig {
          params(_billing_thresholds: T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::BillingThresholds))).returns(T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::BillingThresholds)))
         }
        def billing_thresholds=(_billing_thresholds); end
        # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically` on creation.
        sig { returns(T.nilable(String)) }
        def collection_method; end
        sig { params(_collection_method: T.nilable(String)).returns(T.nilable(String)) }
        def collection_method=(_collection_method); end
        # ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
        sig { returns(T.nilable(String)) }
        def default_payment_method; end
        sig { params(_default_payment_method: T.nilable(String)).returns(T.nilable(String)) }
        def default_payment_method=(_default_payment_method); end
        # Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
        sig { returns(T.nilable(String)) }
        def description; end
        sig { params(_description: T.nilable(String)).returns(T.nilable(String)) }
        def description=(_description); end
        # All invoices will be billed using the specified settings.
        sig {
          returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::InvoiceSettings))
         }
        def invoice_settings; end
        sig {
          params(_invoice_settings: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::InvoiceSettings)).returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::InvoiceSettings))
         }
        def invoice_settings=(_invoice_settings); end
        # The account on behalf of which to charge, for each of the associated subscription's invoices.
        sig { returns(T.nilable(String)) }
        def on_behalf_of; end
        sig { params(_on_behalf_of: T.nilable(String)).returns(T.nilable(String)) }
        def on_behalf_of=(_on_behalf_of); end
        # The data with which to automatically create a Transfer for each of the associated subscription's invoices.
        sig {
          returns(T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::TransferData)))
         }
        def transfer_data; end
        sig {
          params(_transfer_data: T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::TransferData))).returns(T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::TransferData)))
         }
        def transfer_data=(_transfer_data); end
        sig {
          params(application_fee_percent: T.nilable(Float), automatic_tax: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::AutomaticTax), billing_cycle_anchor: T.nilable(String), billing_thresholds: T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::BillingThresholds)), collection_method: T.nilable(String), default_payment_method: T.nilable(String), description: T.nilable(String), invoice_settings: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::InvoiceSettings), on_behalf_of: T.nilable(String), transfer_data: T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings::TransferData))).void
         }
        def initialize(
          application_fee_percent: nil,
          automatic_tax: nil,
          billing_cycle_anchor: nil,
          billing_thresholds: nil,
          collection_method: nil,
          default_payment_method: nil,
          description: nil,
          invoice_settings: nil,
          on_behalf_of: nil,
          transfer_data: nil
        ); end
      end
      class Phase < Stripe::RequestParams
        class AddInvoiceItem < Stripe::RequestParams
          class Discount < Stripe::RequestParams
            # ID of the coupon to create a new discount for.
            sig { returns(T.nilable(String)) }
            def coupon; end
            sig { params(_coupon: T.nilable(String)).returns(T.nilable(String)) }
            def coupon=(_coupon); end
            # ID of an existing discount on the object (or one of its ancestors) to reuse.
            sig { returns(T.nilable(String)) }
            def discount; end
            sig { params(_discount: T.nilable(String)).returns(T.nilable(String)) }
            def discount=(_discount); end
            # ID of the promotion code to create a new discount for.
            sig { returns(T.nilable(String)) }
            def promotion_code; end
            sig { params(_promotion_code: T.nilable(String)).returns(T.nilable(String)) }
            def promotion_code=(_promotion_code); end
            sig {
              params(coupon: T.nilable(String), discount: T.nilable(String), promotion_code: T.nilable(String)).void
             }
            def initialize(coupon: nil, discount: nil, promotion_code: nil); end
          end
          class Period < Stripe::RequestParams
            class End < Stripe::RequestParams
              # A precise Unix timestamp for the end of the invoice item period. Must be greater than or equal to `period.start`.
              sig { returns(T.nilable(Integer)) }
              def timestamp; end
              sig { params(_timestamp: T.nilable(Integer)).returns(T.nilable(Integer)) }
              def timestamp=(_timestamp); end
              # Select how to calculate the end of the invoice item period.
              sig { returns(String) }
              def type; end
              sig { params(_type: String).returns(String) }
              def type=(_type); end
              sig { params(timestamp: T.nilable(Integer), type: String).void }
              def initialize(timestamp: nil, type: nil); end
            end
            class Start < Stripe::RequestParams
              # A precise Unix timestamp for the start of the invoice item period. Must be less than or equal to `period.end`.
              sig { returns(T.nilable(Integer)) }
              def timestamp; end
              sig { params(_timestamp: T.nilable(Integer)).returns(T.nilable(Integer)) }
              def timestamp=(_timestamp); end
              # Select how to calculate the start of the invoice item period.
              sig { returns(String) }
              def type; end
              sig { params(_type: String).returns(String) }
              def type=(_type); end
              sig { params(timestamp: T.nilable(Integer), type: String).void }
              def initialize(timestamp: nil, type: nil); end
            end
            # End of the invoice item period.
            sig {
              returns(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::Period::End)
             }
            def end; end
            sig {
              params(_end: ::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::Period::End).returns(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::Period::End)
             }
            def end=(_end); end
            # Start of the invoice item period.
            sig {
              returns(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::Period::Start)
             }
            def start; end
            sig {
              params(_start: ::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::Period::Start).returns(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::Period::Start)
             }
            def start=(_start); end
            sig {
              params(end_: ::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::Period::End, start: ::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::Period::Start).void
             }
            def initialize(end_: nil, start: nil); end
          end
          class PriceData < Stripe::RequestParams
            # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
            sig { returns(String) }
            def currency; end
            sig { params(_currency: String).returns(String) }
            def currency=(_currency); end
            # The ID of the [Product](https://docs.stripe.com/api/products) that this [Price](https://docs.stripe.com/api/prices) will belong to.
            sig { returns(String) }
            def product; end
            sig { params(_product: String).returns(String) }
            def product=(_product); end
            # Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
            sig { returns(T.nilable(String)) }
            def tax_behavior; end
            sig { params(_tax_behavior: T.nilable(String)).returns(T.nilable(String)) }
            def tax_behavior=(_tax_behavior); end
            # A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge or a negative integer representing the amount to credit to the customer.
            sig { returns(T.nilable(Integer)) }
            def unit_amount; end
            sig { params(_unit_amount: T.nilable(Integer)).returns(T.nilable(Integer)) }
            def unit_amount=(_unit_amount); end
            # Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
            sig { returns(T.nilable(String)) }
            def unit_amount_decimal; end
            sig { params(_unit_amount_decimal: T.nilable(String)).returns(T.nilable(String)) }
            def unit_amount_decimal=(_unit_amount_decimal); end
            sig {
              params(currency: String, product: String, tax_behavior: T.nilable(String), unit_amount: T.nilable(Integer), unit_amount_decimal: T.nilable(String)).void
             }
            def initialize(
              currency: nil,
              product: nil,
              tax_behavior: nil,
              unit_amount: nil,
              unit_amount_decimal: nil
            ); end
          end
          # The coupons to redeem into discounts for the item.
          sig {
            returns(T.nilable(T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::Discount]))
           }
          def discounts; end
          sig {
            params(_discounts: T.nilable(T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::Discount])).returns(T.nilable(T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::Discount]))
           }
          def discounts=(_discounts); end
          # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
          sig { returns(T.nilable(T::Hash[String, String])) }
          def metadata; end
          sig {
            params(_metadata: T.nilable(T::Hash[String, String])).returns(T.nilable(T::Hash[String, String]))
           }
          def metadata=(_metadata); end
          # The period associated with this invoice item. Defaults to the period of the underlying subscription that surrounds the start of the phase.
          sig {
            returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::Period))
           }
          def period; end
          sig {
            params(_period: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::Period)).returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::Period))
           }
          def period=(_period); end
          # The ID of the price object. One of `price` or `price_data` is required.
          sig { returns(T.nilable(String)) }
          def price; end
          sig { params(_price: T.nilable(String)).returns(T.nilable(String)) }
          def price=(_price); end
          # Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. One of `price` or `price_data` is required.
          sig {
            returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::PriceData))
           }
          def price_data; end
          sig {
            params(_price_data: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::PriceData)).returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::PriceData))
           }
          def price_data=(_price_data); end
          # Quantity for this item. Defaults to 1.
          sig { returns(T.nilable(Integer)) }
          def quantity; end
          sig { params(_quantity: T.nilable(Integer)).returns(T.nilable(Integer)) }
          def quantity=(_quantity); end
          # The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item.
          sig { returns(T.nilable(T.any(String, T::Array[String]))) }
          def tax_rates; end
          sig {
            params(_tax_rates: T.nilable(T.any(String, T::Array[String]))).returns(T.nilable(T.any(String, T::Array[String])))
           }
          def tax_rates=(_tax_rates); end
          sig {
            params(discounts: T.nilable(T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::Discount]), metadata: T.nilable(T::Hash[String, String]), period: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::Period), price: T.nilable(String), price_data: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem::PriceData), quantity: T.nilable(Integer), tax_rates: T.nilable(T.any(String, T::Array[String]))).void
           }
          def initialize(
            discounts: nil,
            metadata: nil,
            period: nil,
            price: nil,
            price_data: nil,
            quantity: nil,
            tax_rates: nil
          ); end
        end
        class AutomaticTax < Stripe::RequestParams
          class Liability < Stripe::RequestParams
            # The connected account being referenced when `type` is `account`.
            sig { returns(T.nilable(String)) }
            def account; end
            sig { params(_account: T.nilable(String)).returns(T.nilable(String)) }
            def account=(_account); end
            # Type of the account referenced in the request.
            sig { returns(String) }
            def type; end
            sig { params(_type: String).returns(String) }
            def type=(_type); end
            sig { params(account: T.nilable(String), type: String).void }
            def initialize(account: nil, type: nil); end
          end
          # Enabled automatic tax calculation which will automatically compute tax rates on all invoices generated by the subscription.
          sig { returns(T::Boolean) }
          def enabled; end
          sig { params(_enabled: T::Boolean).returns(T::Boolean) }
          def enabled=(_enabled); end
          # The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
          sig {
            returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AutomaticTax::Liability))
           }
          def liability; end
          sig {
            params(_liability: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AutomaticTax::Liability)).returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AutomaticTax::Liability))
           }
          def liability=(_liability); end
          sig {
            params(enabled: T::Boolean, liability: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AutomaticTax::Liability)).void
           }
          def initialize(enabled: nil, liability: nil); end
        end
        class BillingThresholds < Stripe::RequestParams
          # Monetary threshold that triggers the subscription to advance to a new billing period
          sig { returns(T.nilable(Integer)) }
          def amount_gte; end
          sig { params(_amount_gte: T.nilable(Integer)).returns(T.nilable(Integer)) }
          def amount_gte=(_amount_gte); end
          # Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged.
          sig { returns(T.nilable(T::Boolean)) }
          def reset_billing_cycle_anchor; end
          sig {
            params(_reset_billing_cycle_anchor: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean))
           }
          def reset_billing_cycle_anchor=(_reset_billing_cycle_anchor); end
          sig {
            params(amount_gte: T.nilable(Integer), reset_billing_cycle_anchor: T.nilable(T::Boolean)).void
           }
          def initialize(amount_gte: nil, reset_billing_cycle_anchor: nil); end
        end
        class Discount < Stripe::RequestParams
          # ID of the coupon to create a new discount for.
          sig { returns(T.nilable(String)) }
          def coupon; end
          sig { params(_coupon: T.nilable(String)).returns(T.nilable(String)) }
          def coupon=(_coupon); end
          # ID of an existing discount on the object (or one of its ancestors) to reuse.
          sig { returns(T.nilable(String)) }
          def discount; end
          sig { params(_discount: T.nilable(String)).returns(T.nilable(String)) }
          def discount=(_discount); end
          # ID of the promotion code to create a new discount for.
          sig { returns(T.nilable(String)) }
          def promotion_code; end
          sig { params(_promotion_code: T.nilable(String)).returns(T.nilable(String)) }
          def promotion_code=(_promotion_code); end
          sig {
            params(coupon: T.nilable(String), discount: T.nilable(String), promotion_code: T.nilable(String)).void
           }
          def initialize(coupon: nil, discount: nil, promotion_code: nil); end
        end
        class Duration < Stripe::RequestParams
          # Specifies phase duration. Either `day`, `week`, `month` or `year`.
          sig { returns(String) }
          def interval; end
          sig { params(_interval: String).returns(String) }
          def interval=(_interval); end
          # The multiplier applied to the interval.
          sig { returns(T.nilable(Integer)) }
          def interval_count; end
          sig { params(_interval_count: T.nilable(Integer)).returns(T.nilable(Integer)) }
          def interval_count=(_interval_count); end
          sig { params(interval: String, interval_count: T.nilable(Integer)).void }
          def initialize(interval: nil, interval_count: nil); end
        end
        class InvoiceSettings < Stripe::RequestParams
          class Issuer < Stripe::RequestParams
            # The connected account being referenced when `type` is `account`.
            sig { returns(T.nilable(String)) }
            def account; end
            sig { params(_account: T.nilable(String)).returns(T.nilable(String)) }
            def account=(_account); end
            # Type of the account referenced in the request.
            sig { returns(String) }
            def type; end
            sig { params(_type: String).returns(String) }
            def type=(_type); end
            sig { params(account: T.nilable(String), type: String).void }
            def initialize(account: nil, type: nil); end
          end
          # The account tax IDs associated with this phase of the subscription schedule. Will be set on invoices generated by this phase of the subscription schedule.
          sig { returns(T.nilable(T.any(String, T::Array[String]))) }
          def account_tax_ids; end
          sig {
            params(_account_tax_ids: T.nilable(T.any(String, T::Array[String]))).returns(T.nilable(T.any(String, T::Array[String])))
           }
          def account_tax_ids=(_account_tax_ids); end
          # Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
          sig { returns(T.nilable(Integer)) }
          def days_until_due; end
          sig { params(_days_until_due: T.nilable(Integer)).returns(T.nilable(Integer)) }
          def days_until_due=(_days_until_due); end
          # The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
          sig {
            returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::InvoiceSettings::Issuer))
           }
          def issuer; end
          sig {
            params(_issuer: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::InvoiceSettings::Issuer)).returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::InvoiceSettings::Issuer))
           }
          def issuer=(_issuer); end
          sig {
            params(account_tax_ids: T.nilable(T.any(String, T::Array[String])), days_until_due: T.nilable(Integer), issuer: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::InvoiceSettings::Issuer)).void
           }
          def initialize(account_tax_ids: nil, days_until_due: nil, issuer: nil); end
        end
        class Item < Stripe::RequestParams
          class BillingThresholds < Stripe::RequestParams
            # Number of units that meets the billing threshold to advance the subscription to a new billing period (e.g., it takes 10 $5 units to meet a $50 [monetary threshold](https://stripe.com/docs/api/subscriptions/update#update_subscription-billing_thresholds-amount_gte))
            sig { returns(Integer) }
            def usage_gte; end
            sig { params(_usage_gte: Integer).returns(Integer) }
            def usage_gte=(_usage_gte); end
            sig { params(usage_gte: Integer).void }
            def initialize(usage_gte: nil); end
          end
          class Discount < Stripe::RequestParams
            # ID of the coupon to create a new discount for.
            sig { returns(T.nilable(String)) }
            def coupon; end
            sig { params(_coupon: T.nilable(String)).returns(T.nilable(String)) }
            def coupon=(_coupon); end
            # ID of an existing discount on the object (or one of its ancestors) to reuse.
            sig { returns(T.nilable(String)) }
            def discount; end
            sig { params(_discount: T.nilable(String)).returns(T.nilable(String)) }
            def discount=(_discount); end
            # ID of the promotion code to create a new discount for.
            sig { returns(T.nilable(String)) }
            def promotion_code; end
            sig { params(_promotion_code: T.nilable(String)).returns(T.nilable(String)) }
            def promotion_code=(_promotion_code); end
            sig {
              params(coupon: T.nilable(String), discount: T.nilable(String), promotion_code: T.nilable(String)).void
             }
            def initialize(coupon: nil, discount: nil, promotion_code: nil); end
          end
          class PriceData < Stripe::RequestParams
            class Recurring < Stripe::RequestParams
              # Specifies billing frequency. Either `day`, `week`, `month` or `year`.
              sig { returns(String) }
              def interval; end
              sig { params(_interval: String).returns(String) }
              def interval=(_interval); end
              # The number of intervals between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of three years interval allowed (3 years, 36 months, or 156 weeks).
              sig { returns(T.nilable(Integer)) }
              def interval_count; end
              sig { params(_interval_count: T.nilable(Integer)).returns(T.nilable(Integer)) }
              def interval_count=(_interval_count); end
              sig { params(interval: String, interval_count: T.nilable(Integer)).void }
              def initialize(interval: nil, interval_count: nil); end
            end
            # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
            sig { returns(String) }
            def currency; end
            sig { params(_currency: String).returns(String) }
            def currency=(_currency); end
            # The ID of the [Product](https://docs.stripe.com/api/products) that this [Price](https://docs.stripe.com/api/prices) will belong to.
            sig { returns(String) }
            def product; end
            sig { params(_product: String).returns(String) }
            def product=(_product); end
            # The recurring components of a price such as `interval` and `interval_count`.
            sig {
              returns(::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item::PriceData::Recurring)
             }
            def recurring; end
            sig {
              params(_recurring: ::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item::PriceData::Recurring).returns(::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item::PriceData::Recurring)
             }
            def recurring=(_recurring); end
            # Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
            sig { returns(T.nilable(String)) }
            def tax_behavior; end
            sig { params(_tax_behavior: T.nilable(String)).returns(T.nilable(String)) }
            def tax_behavior=(_tax_behavior); end
            # A positive integer in cents (or local equivalent) (or 0 for a free price) representing how much to charge.
            sig { returns(T.nilable(Integer)) }
            def unit_amount; end
            sig { params(_unit_amount: T.nilable(Integer)).returns(T.nilable(Integer)) }
            def unit_amount=(_unit_amount); end
            # Same as `unit_amount`, but accepts a decimal value in cents (or local equivalent) with at most 12 decimal places. Only one of `unit_amount` and `unit_amount_decimal` can be set.
            sig { returns(T.nilable(String)) }
            def unit_amount_decimal; end
            sig { params(_unit_amount_decimal: T.nilable(String)).returns(T.nilable(String)) }
            def unit_amount_decimal=(_unit_amount_decimal); end
            sig {
              params(currency: String, product: String, recurring: ::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item::PriceData::Recurring, tax_behavior: T.nilable(String), unit_amount: T.nilable(Integer), unit_amount_decimal: T.nilable(String)).void
             }
            def initialize(
              currency: nil,
              product: nil,
              recurring: nil,
              tax_behavior: nil,
              unit_amount: nil,
              unit_amount_decimal: nil
            ); end
          end
          # Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds.
          sig {
            returns(T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item::BillingThresholds)))
           }
          def billing_thresholds; end
          sig {
            params(_billing_thresholds: T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item::BillingThresholds))).returns(T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item::BillingThresholds)))
           }
          def billing_thresholds=(_billing_thresholds); end
          # The coupons to redeem into discounts for the subscription item.
          sig {
            returns(T.nilable(T.any(String, T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item::Discount])))
           }
          def discounts; end
          sig {
            params(_discounts: T.nilable(T.any(String, T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item::Discount]))).returns(T.nilable(T.any(String, T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item::Discount])))
           }
          def discounts=(_discounts); end
          # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a configuration item. Metadata on a configuration item will update the underlying subscription item's `metadata` when the phase is entered, adding new keys and replacing existing keys. Individual keys in the subscription item's `metadata` can be unset by posting an empty value to them in the configuration item's `metadata`. To unset all keys in the subscription item's `metadata`, update the subscription item directly or unset every key individually from the configuration item's `metadata`.
          sig { returns(T.nilable(T::Hash[String, String])) }
          def metadata; end
          sig {
            params(_metadata: T.nilable(T::Hash[String, String])).returns(T.nilable(T::Hash[String, String]))
           }
          def metadata=(_metadata); end
          # The plan ID to subscribe to. You may specify the same ID in `plan` and `price`.
          sig { returns(T.nilable(String)) }
          def plan; end
          sig { params(_plan: T.nilable(String)).returns(T.nilable(String)) }
          def plan=(_plan); end
          # The ID of the price object.
          sig { returns(T.nilable(String)) }
          def price; end
          sig { params(_price: T.nilable(String)).returns(T.nilable(String)) }
          def price=(_price); end
          # Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline.
          sig {
            returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item::PriceData))
           }
          def price_data; end
          sig {
            params(_price_data: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item::PriceData)).returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item::PriceData))
           }
          def price_data=(_price_data); end
          # Quantity for the given price. Can be set only if the price's `usage_type` is `licensed` and not `metered`.
          sig { returns(T.nilable(Integer)) }
          def quantity; end
          sig { params(_quantity: T.nilable(Integer)).returns(T.nilable(Integer)) }
          def quantity=(_quantity); end
          # A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will override the [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates) on the Subscription. When updating, pass an empty string to remove previously-defined tax rates.
          sig { returns(T.nilable(T.any(String, T::Array[String]))) }
          def tax_rates; end
          sig {
            params(_tax_rates: T.nilable(T.any(String, T::Array[String]))).returns(T.nilable(T.any(String, T::Array[String])))
           }
          def tax_rates=(_tax_rates); end
          sig {
            params(billing_thresholds: T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item::BillingThresholds)), discounts: T.nilable(T.any(String, T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item::Discount])), metadata: T.nilable(T::Hash[String, String]), plan: T.nilable(String), price: T.nilable(String), price_data: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item::PriceData), quantity: T.nilable(Integer), tax_rates: T.nilable(T.any(String, T::Array[String]))).void
           }
          def initialize(
            billing_thresholds: nil,
            discounts: nil,
            metadata: nil,
            plan: nil,
            price: nil,
            price_data: nil,
            quantity: nil,
            tax_rates: nil
          ); end
        end
        class TransferData < Stripe::RequestParams
          # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
          sig { returns(T.nilable(Float)) }
          def amount_percent; end
          sig { params(_amount_percent: T.nilable(Float)).returns(T.nilable(Float)) }
          def amount_percent=(_amount_percent); end
          # ID of an existing, connected Stripe account.
          sig { returns(String) }
          def destination; end
          sig { params(_destination: String).returns(String) }
          def destination=(_destination); end
          sig { params(amount_percent: T.nilable(Float), destination: String).void }
          def initialize(amount_percent: nil, destination: nil); end
        end
        # A list of prices and quantities that will generate invoice items appended to the next invoice for this phase. You may pass up to 20 items.
        sig {
          returns(T.nilable(T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem]))
         }
        def add_invoice_items; end
        sig {
          params(_add_invoice_items: T.nilable(T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem])).returns(T.nilable(T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem]))
         }
        def add_invoice_items=(_add_invoice_items); end
        # A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. The request must be made by a platform account on a connected account in order to set an application fee percentage. For more information, see the application fees [documentation](https://stripe.com/docs/connect/subscriptions#collecting-fees-on-subscriptions).
        sig { returns(T.nilable(Float)) }
        def application_fee_percent; end
        sig { params(_application_fee_percent: T.nilable(Float)).returns(T.nilable(Float)) }
        def application_fee_percent=(_application_fee_percent); end
        # Automatic tax settings for this phase.
        sig {
          returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AutomaticTax))
         }
        def automatic_tax; end
        sig {
          params(_automatic_tax: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AutomaticTax)).returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AutomaticTax))
         }
        def automatic_tax=(_automatic_tax); end
        # Can be set to `phase_start` to set the anchor to the start of the phase or `automatic` to automatically change it if needed. Cannot be set to `phase_start` if this phase specifies a trial. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
        sig { returns(T.nilable(String)) }
        def billing_cycle_anchor; end
        sig { params(_billing_cycle_anchor: T.nilable(String)).returns(T.nilable(String)) }
        def billing_cycle_anchor=(_billing_cycle_anchor); end
        # Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period. Pass an empty string to remove previously-defined thresholds.
        sig {
          returns(T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::UpdateParams::Phase::BillingThresholds)))
         }
        def billing_thresholds; end
        sig {
          params(_billing_thresholds: T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::UpdateParams::Phase::BillingThresholds))).returns(T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::UpdateParams::Phase::BillingThresholds)))
         }
        def billing_thresholds=(_billing_thresholds); end
        # Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically` on creation.
        sig { returns(T.nilable(String)) }
        def collection_method; end
        sig { params(_collection_method: T.nilable(String)).returns(T.nilable(String)) }
        def collection_method=(_collection_method); end
        # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
        sig { returns(T.nilable(String)) }
        def currency; end
        sig { params(_currency: T.nilable(String)).returns(T.nilable(String)) }
        def currency=(_currency); end
        # ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
        sig { returns(T.nilable(String)) }
        def default_payment_method; end
        sig { params(_default_payment_method: T.nilable(String)).returns(T.nilable(String)) }
        def default_payment_method=(_default_payment_method); end
        # A list of [Tax Rate](https://stripe.com/docs/api/tax_rates) ids. These Tax Rates will set the Subscription's [`default_tax_rates`](https://stripe.com/docs/api/subscriptions/create#create_subscription-default_tax_rates), which means they will be the Invoice's [`default_tax_rates`](https://stripe.com/docs/api/invoices/create#create_invoice-default_tax_rates) for any Invoices issued by the Subscription during this Phase.
        sig { returns(T.nilable(T.any(String, T::Array[String]))) }
        def default_tax_rates; end
        sig {
          params(_default_tax_rates: T.nilable(T.any(String, T::Array[String]))).returns(T.nilable(T.any(String, T::Array[String])))
         }
        def default_tax_rates=(_default_tax_rates); end
        # Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
        sig { returns(T.nilable(String)) }
        def description; end
        sig { params(_description: T.nilable(String)).returns(T.nilable(String)) }
        def description=(_description); end
        # The coupons to redeem into discounts for the schedule phase. If not specified, inherits the discount from the subscription's customer. Pass an empty string to avoid inheriting any discounts.
        sig {
          returns(T.nilable(T.any(String, T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::Discount])))
         }
        def discounts; end
        sig {
          params(_discounts: T.nilable(T.any(String, T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::Discount]))).returns(T.nilable(T.any(String, T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::Discount])))
         }
        def discounts=(_discounts); end
        # The number of intervals the phase should last. If set, `end_date` must not be set.
        sig { returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::Duration)) }
        def duration; end
        sig {
          params(_duration: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::Duration)).returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::Duration))
         }
        def duration=(_duration); end
        # The date at which this phase of the subscription schedule ends. If set, `iterations` must not be set.
        sig { returns(T.nilable(T.any(Integer, String))) }
        def end_date; end
        sig {
          params(_end_date: T.nilable(T.any(Integer, String))).returns(T.nilable(T.any(Integer, String)))
         }
        def end_date=(_end_date); end
        # All invoices will be billed using the specified settings.
        sig {
          returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::InvoiceSettings))
         }
        def invoice_settings; end
        sig {
          params(_invoice_settings: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::InvoiceSettings)).returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::InvoiceSettings))
         }
        def invoice_settings=(_invoice_settings); end
        # List of configuration items, each with an attached price, to apply during this phase of the subscription schedule.
        sig { returns(T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item]) }
        def items; end
        sig {
          params(_items: T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item]).returns(T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item])
         }
        def items=(_items); end
        # Integer representing the multiplier applied to the price interval. For example, `iterations=2` applied to a price with `interval=month` and `interval_count=3` results in a phase of duration `2 * 3 months = 6 months`. If set, `end_date` must not be set. This parameter is deprecated and will be removed in a future version. Use `duration` instead.
        sig { returns(T.nilable(Integer)) }
        def iterations; end
        sig { params(_iterations: T.nilable(Integer)).returns(T.nilable(Integer)) }
        def iterations=(_iterations); end
        # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a phase. Metadata on a schedule's phase will update the underlying subscription's `metadata` when the phase is entered, adding new keys and replacing existing keys in the subscription's `metadata`. Individual keys in the subscription's `metadata` can be unset by posting an empty value to them in the phase's `metadata`. To unset all keys in the subscription's `metadata`, update the subscription directly or unset every key individually from the phase's `metadata`.
        sig { returns(T.nilable(T::Hash[String, String])) }
        def metadata; end
        sig {
          params(_metadata: T.nilable(T::Hash[String, String])).returns(T.nilable(T::Hash[String, String]))
         }
        def metadata=(_metadata); end
        # The account on behalf of which to charge, for each of the associated subscription's invoices.
        sig { returns(T.nilable(String)) }
        def on_behalf_of; end
        sig { params(_on_behalf_of: T.nilable(String)).returns(T.nilable(String)) }
        def on_behalf_of=(_on_behalf_of); end
        # Controls whether the subscription schedule should create [prorations](https://stripe.com/docs/billing/subscriptions/prorations) when transitioning to this phase if there is a difference in billing configuration. It's different from the request-level [proration_behavior](https://stripe.com/docs/api/subscription_schedules/update#update_subscription_schedule-proration_behavior) parameter which controls what happens if the update request affects the billing configuration (item price, quantity, etc.) of the current phase.
        sig { returns(T.nilable(String)) }
        def proration_behavior; end
        sig { params(_proration_behavior: T.nilable(String)).returns(T.nilable(String)) }
        def proration_behavior=(_proration_behavior); end
        # The date at which this phase of the subscription schedule starts or `now`. Must be set on the first phase.
        sig { returns(T.nilable(T.any(Integer, String))) }
        def start_date; end
        sig {
          params(_start_date: T.nilable(T.any(Integer, String))).returns(T.nilable(T.any(Integer, String)))
         }
        def start_date=(_start_date); end
        # The data with which to automatically create a Transfer for each of the associated subscription's invoices.
        sig {
          returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::TransferData))
         }
        def transfer_data; end
        sig {
          params(_transfer_data: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::TransferData)).returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::TransferData))
         }
        def transfer_data=(_transfer_data); end
        # If set to true the entire phase is counted as a trial and the customer will not be charged for any fees.
        sig { returns(T.nilable(T::Boolean)) }
        def trial; end
        sig { params(_trial: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
        def trial=(_trial); end
        # Sets the phase to trialing from the start date to this date. Must be before the phase end date, can not be combined with `trial`
        sig { returns(T.nilable(T.any(Integer, String))) }
        def trial_end; end
        sig {
          params(_trial_end: T.nilable(T.any(Integer, String))).returns(T.nilable(T.any(Integer, String)))
         }
        def trial_end=(_trial_end); end
        sig {
          params(add_invoice_items: T.nilable(T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::AddInvoiceItem]), application_fee_percent: T.nilable(Float), automatic_tax: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::AutomaticTax), billing_cycle_anchor: T.nilable(String), billing_thresholds: T.nilable(T.any(String, ::Stripe::SubscriptionSchedule::UpdateParams::Phase::BillingThresholds)), collection_method: T.nilable(String), currency: T.nilable(String), default_payment_method: T.nilable(String), default_tax_rates: T.nilable(T.any(String, T::Array[String])), description: T.nilable(String), discounts: T.nilable(T.any(String, T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::Discount])), duration: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::Duration), end_date: T.nilable(T.any(Integer, String)), invoice_settings: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::InvoiceSettings), items: T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase::Item], iterations: T.nilable(Integer), metadata: T.nilable(T::Hash[String, String]), on_behalf_of: T.nilable(String), proration_behavior: T.nilable(String), start_date: T.nilable(T.any(Integer, String)), transfer_data: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::Phase::TransferData), trial: T.nilable(T::Boolean), trial_end: T.nilable(T.any(Integer, String))).void
         }
        def initialize(
          add_invoice_items: nil,
          application_fee_percent: nil,
          automatic_tax: nil,
          billing_cycle_anchor: nil,
          billing_thresholds: nil,
          collection_method: nil,
          currency: nil,
          default_payment_method: nil,
          default_tax_rates: nil,
          description: nil,
          discounts: nil,
          duration: nil,
          end_date: nil,
          invoice_settings: nil,
          items: nil,
          iterations: nil,
          metadata: nil,
          on_behalf_of: nil,
          proration_behavior: nil,
          start_date: nil,
          transfer_data: nil,
          trial: nil,
          trial_end: nil
        ); end
      end
      # Object representing the subscription schedule's default settings.
      sig { returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings)) }
      def default_settings; end
      sig {
        params(_default_settings: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings)).returns(T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings))
       }
      def default_settings=(_default_settings); end
      # Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription.
      sig { returns(T.nilable(String)) }
      def end_behavior; end
      sig { params(_end_behavior: T.nilable(String)).returns(T.nilable(String)) }
      def end_behavior=(_end_behavior); end
      # Specifies which fields in the response should be expanded.
      sig { returns(T.nilable(T::Array[String])) }
      def expand; end
      sig { params(_expand: T.nilable(T::Array[String])).returns(T.nilable(T::Array[String])) }
      def expand=(_expand); end
      # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
      sig { returns(T.nilable(T.any(String, T::Hash[String, String]))) }
      def metadata; end
      sig {
        params(_metadata: T.nilable(T.any(String, T::Hash[String, String]))).returns(T.nilable(T.any(String, T::Hash[String, String])))
       }
      def metadata=(_metadata); end
      # List representing phases of the subscription schedule. Each phase can be customized to have different durations, plans, and coupons. If there are multiple phases, the `end_date` of one phase will always equal the `start_date` of the next phase. Note that past phases can be omitted.
      sig { returns(T.nilable(T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase])) }
      def phases; end
      sig {
        params(_phases: T.nilable(T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase])).returns(T.nilable(T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase]))
       }
      def phases=(_phases); end
      # If the update changes the billing configuration (item price, quantity, etc.) of the current phase, indicates how prorations from this change should be handled. The default value is `create_prorations`.
      sig { returns(T.nilable(String)) }
      def proration_behavior; end
      sig { params(_proration_behavior: T.nilable(String)).returns(T.nilable(String)) }
      def proration_behavior=(_proration_behavior); end
      sig {
        params(default_settings: T.nilable(::Stripe::SubscriptionSchedule::UpdateParams::DefaultSettings), end_behavior: T.nilable(String), expand: T.nilable(T::Array[String]), metadata: T.nilable(T.any(String, T::Hash[String, String])), phases: T.nilable(T::Array[::Stripe::SubscriptionSchedule::UpdateParams::Phase]), proration_behavior: T.nilable(String)).void
       }
      def initialize(
        default_settings: nil,
        end_behavior: nil,
        expand: nil,
        metadata: nil,
        phases: nil,
        proration_behavior: nil
      ); end
    end
    class CancelParams < Stripe::RequestParams
      # Specifies which fields in the response should be expanded.
      sig { returns(T.nilable(T::Array[String])) }
      def expand; end
      sig { params(_expand: T.nilable(T::Array[String])).returns(T.nilable(T::Array[String])) }
      def expand=(_expand); end
      # If the subscription schedule is `active`, indicates if a final invoice will be generated that contains any un-invoiced metered usage and new/pending proration invoice items. Defaults to `true`.
      sig { returns(T.nilable(T::Boolean)) }
      def invoice_now; end
      sig { params(_invoice_now: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
      def invoice_now=(_invoice_now); end
      # If the subscription schedule is `active`, indicates if the cancellation should be prorated. Defaults to `true`.
      sig { returns(T.nilable(T::Boolean)) }
      def prorate; end
      sig { params(_prorate: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
      def prorate=(_prorate); end
      sig {
        params(expand: T.nilable(T::Array[String]), invoice_now: T.nilable(T::Boolean), prorate: T.nilable(T::Boolean)).void
       }
      def initialize(expand: nil, invoice_now: nil, prorate: nil); end
    end
    class ReleaseParams < Stripe::RequestParams
      # Specifies which fields in the response should be expanded.
      sig { returns(T.nilable(T::Array[String])) }
      def expand; end
      sig { params(_expand: T.nilable(T::Array[String])).returns(T.nilable(T::Array[String])) }
      def expand=(_expand); end
      # Keep any cancellation on the subscription that the schedule has set
      sig { returns(T.nilable(T::Boolean)) }
      def preserve_cancel_date; end
      sig { params(_preserve_cancel_date: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
      def preserve_cancel_date=(_preserve_cancel_date); end
      sig {
        params(expand: T.nilable(T::Array[String]), preserve_cancel_date: T.nilable(T::Boolean)).void
       }
      def initialize(expand: nil, preserve_cancel_date: nil); end
    end
    # Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is not_started or active.
    sig {
      params(params: T.any(::Stripe::SubscriptionSchedule::CancelParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::SubscriptionSchedule)
     }
    def cancel(params = {}, opts = {}); end

    # Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an active subscription). A subscription schedule can only be canceled if its status is not_started or active.
    sig {
      params(schedule: String, params: T.any(::Stripe::SubscriptionSchedule::CancelParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::SubscriptionSchedule)
     }
    def self.cancel(schedule, params = {}, opts = {}); end

    # Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.
    sig {
      params(params: T.any(::Stripe::SubscriptionSchedule::CreateParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::SubscriptionSchedule)
     }
    def self.create(params = {}, opts = {}); end

    # Retrieves the list of your subscription schedules.
    sig {
      params(params: T.any(::Stripe::SubscriptionSchedule::ListParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::ListObject)
     }
    def self.list(params = {}, opts = {}); end

    # Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is not_started or active. If the subscription schedule is currently associated with a subscription, releasing it will remove its subscription property and set the subscription's ID to the released_subscription property.
    sig {
      params(params: T.any(::Stripe::SubscriptionSchedule::ReleaseParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::SubscriptionSchedule)
     }
    def release(params = {}, opts = {}); end

    # Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing subscription in place. A schedule can only be released if its status is not_started or active. If the subscription schedule is currently associated with a subscription, releasing it will remove its subscription property and set the subscription's ID to the released_subscription property.
    sig {
      params(schedule: String, params: T.any(::Stripe::SubscriptionSchedule::ReleaseParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::SubscriptionSchedule)
     }
    def self.release(schedule, params = {}, opts = {}); end

    # Updates an existing subscription schedule.
    sig {
      params(schedule: String, params: T.any(::Stripe::SubscriptionSchedule::UpdateParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::SubscriptionSchedule)
     }
    def self.update(schedule, params = {}, opts = {}); end
  end
end