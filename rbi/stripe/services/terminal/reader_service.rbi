# File generated from our OpenAPI spec
# frozen_string_literal: true

# typed: true
module Stripe
  module Terminal
    class ReaderService < StripeService
      class DeleteParams < Stripe::RequestParams

      end
      class RetrieveParams < Stripe::RequestParams
        # Specifies which fields in the response should be expanded.
        sig { returns(T.nilable(T::Array[String])) }
        attr_accessor :expand
        sig { params(expand: T.nilable(T::Array[String])).void }
        def initialize(expand: nil); end
      end
      class UpdateParams < Stripe::RequestParams
        # Specifies which fields in the response should be expanded.
        sig { returns(T.nilable(T::Array[String])) }
        attr_accessor :expand
        # The new label of the reader.
        sig { returns(T.nilable(T.nilable(String))) }
        attr_accessor :label
        # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
        sig { returns(T.nilable(T.nilable(T.any(String, T::Hash[String, String])))) }
        attr_accessor :metadata
        sig {
          params(expand: T.nilable(T::Array[String]), label: T.nilable(T.nilable(String)), metadata: T.nilable(T.nilable(T.any(String, T::Hash[String, String])))).void
         }
        def initialize(expand: nil, label: nil, metadata: nil); end
      end
      class ListParams < Stripe::RequestParams
        # Filters readers by device type
        sig { returns(T.nilable(String)) }
        attr_accessor :device_type
        # A cursor for use in pagination. `ending_before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with `obj_bar`, your subsequent call can include `ending_before=obj_bar` in order to fetch the previous page of the list.
        sig { returns(T.nilable(String)) }
        attr_accessor :ending_before
        # Specifies which fields in the response should be expanded.
        sig { returns(T.nilable(T::Array[String])) }
        attr_accessor :expand
        # A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 10.
        sig { returns(T.nilable(Integer)) }
        attr_accessor :limit
        # A location ID to filter the response list to only readers at the specific location
        sig { returns(T.nilable(String)) }
        attr_accessor :location
        # Filters readers by serial number
        sig { returns(T.nilable(String)) }
        attr_accessor :serial_number
        # A cursor for use in pagination. `starting_after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with `obj_foo`, your subsequent call can include `starting_after=obj_foo` in order to fetch the next page of the list.
        sig { returns(T.nilable(String)) }
        attr_accessor :starting_after
        # A status filter to filter readers to only offline or online readers
        sig { returns(T.nilable(String)) }
        attr_accessor :status
        sig {
          params(device_type: T.nilable(String), ending_before: T.nilable(String), expand: T.nilable(T::Array[String]), limit: T.nilable(Integer), location: T.nilable(String), serial_number: T.nilable(String), starting_after: T.nilable(String), status: T.nilable(String)).void
         }
        def initialize(
          device_type: nil,
          ending_before: nil,
          expand: nil,
          limit: nil,
          location: nil,
          serial_number: nil,
          starting_after: nil,
          status: nil
        ); end
      end
      class CreateParams < Stripe::RequestParams
        # Specifies which fields in the response should be expanded.
        sig { returns(T.nilable(T::Array[String])) }
        attr_accessor :expand
        # Custom label given to the reader for easier identification. If no label is specified, the registration code will be used.
        sig { returns(T.nilable(String)) }
        attr_accessor :label
        # The location to assign the reader to.
        sig { returns(T.nilable(String)) }
        attr_accessor :location
        # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
        sig { returns(T.nilable(T.nilable(T.any(String, T::Hash[String, String])))) }
        attr_accessor :metadata
        # A code generated by the reader used for registering to an account.
        sig { returns(String) }
        attr_accessor :registration_code
        sig {
          params(expand: T.nilable(T::Array[String]), label: T.nilable(String), location: T.nilable(String), metadata: T.nilable(T.nilable(T.any(String, T::Hash[String, String]))), registration_code: String).void
         }
        def initialize(
          expand: nil,
          label: nil,
          location: nil,
          metadata: nil,
          registration_code: nil
        ); end
      end
      class CancelActionParams < Stripe::RequestParams
        # Specifies which fields in the response should be expanded.
        sig { returns(T.nilable(T::Array[String])) }
        attr_accessor :expand
        sig { params(expand: T.nilable(T::Array[String])).void }
        def initialize(expand: nil); end
      end
      class ProcessPaymentIntentParams < Stripe::RequestParams
        class ProcessConfig < Stripe::RequestParams
          class Tipping < Stripe::RequestParams
            # Amount used to calculate tip suggestions on tipping selection screen for this transaction. Must be a positive integer in the smallest currency unit (e.g., 100 cents to represent $1.00 or 100 to represent Â¥100, a zero-decimal currency).
            sig { returns(T.nilable(Integer)) }
            attr_accessor :amount_eligible
            sig { params(amount_eligible: T.nilable(Integer)).void }
            def initialize(amount_eligible: nil); end
          end
          # This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow.
          sig { returns(T.nilable(String)) }
          attr_accessor :allow_redisplay
          # Enables cancel button on transaction screens.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :enable_customer_cancellation
          # Override showing a tipping selection screen on this transaction.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :skip_tipping
          # Tipping configuration for this transaction.
          sig {
            returns(T.nilable(::Stripe::Terminal::ReaderService::ProcessPaymentIntentParams::ProcessConfig::Tipping))
           }
          attr_accessor :tipping
          sig {
            params(allow_redisplay: T.nilable(String), enable_customer_cancellation: T.nilable(T::Boolean), skip_tipping: T.nilable(T::Boolean), tipping: T.nilable(::Stripe::Terminal::ReaderService::ProcessPaymentIntentParams::ProcessConfig::Tipping)).void
           }
          def initialize(
            allow_redisplay: nil,
            enable_customer_cancellation: nil,
            skip_tipping: nil,
            tipping: nil
          ); end
        end
        # Specifies which fields in the response should be expanded.
        sig { returns(T.nilable(T::Array[String])) }
        attr_accessor :expand
        # PaymentIntent ID
        sig { returns(String) }
        attr_accessor :payment_intent
        # Configuration overrides
        sig {
          returns(T.nilable(::Stripe::Terminal::ReaderService::ProcessPaymentIntentParams::ProcessConfig))
         }
        attr_accessor :process_config
        sig {
          params(expand: T.nilable(T::Array[String]), payment_intent: String, process_config: T.nilable(::Stripe::Terminal::ReaderService::ProcessPaymentIntentParams::ProcessConfig)).void
         }
        def initialize(expand: nil, payment_intent: nil, process_config: nil); end
      end
      class ProcessSetupIntentParams < Stripe::RequestParams
        class ProcessConfig < Stripe::RequestParams
          # Enables cancel button on transaction screens.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :enable_customer_cancellation
          sig { params(enable_customer_cancellation: T.nilable(T::Boolean)).void }
          def initialize(enable_customer_cancellation: nil); end
        end
        # This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow.
        sig { returns(String) }
        attr_accessor :allow_redisplay
        # Specifies which fields in the response should be expanded.
        sig { returns(T.nilable(T::Array[String])) }
        attr_accessor :expand
        # Configuration overrides
        sig {
          returns(T.nilable(::Stripe::Terminal::ReaderService::ProcessSetupIntentParams::ProcessConfig))
         }
        attr_accessor :process_config
        # SetupIntent ID
        sig { returns(String) }
        attr_accessor :setup_intent
        sig {
          params(allow_redisplay: String, expand: T.nilable(T::Array[String]), process_config: T.nilable(::Stripe::Terminal::ReaderService::ProcessSetupIntentParams::ProcessConfig), setup_intent: String).void
         }
        def initialize(
          allow_redisplay: nil,
          expand: nil,
          process_config: nil,
          setup_intent: nil
        ); end
      end
      class RefundPaymentParams < Stripe::RequestParams
        class RefundPaymentConfig < Stripe::RequestParams
          # Enables cancel button on transaction screens.
          sig { returns(T.nilable(T::Boolean)) }
          attr_accessor :enable_customer_cancellation
          sig { params(enable_customer_cancellation: T.nilable(T::Boolean)).void }
          def initialize(enable_customer_cancellation: nil); end
        end
        # A positive integer in __cents__ representing how much of this charge to refund.
        sig { returns(T.nilable(Integer)) }
        attr_accessor :amount
        # ID of the Charge to refund.
        sig { returns(T.nilable(String)) }
        attr_accessor :charge
        # Specifies which fields in the response should be expanded.
        sig { returns(T.nilable(T::Array[String])) }
        attr_accessor :expand
        # Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Individual keys can be unset by posting an empty value to them. All keys can be unset by posting an empty value to `metadata`.
        sig { returns(T.nilable(T::Hash[String, String])) }
        attr_accessor :metadata
        # ID of the PaymentIntent to refund.
        sig { returns(T.nilable(String)) }
        attr_accessor :payment_intent
        # Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.
        sig { returns(T.nilable(T::Boolean)) }
        attr_accessor :refund_application_fee
        # Configuration overrides
        sig {
          returns(T.nilable(::Stripe::Terminal::ReaderService::RefundPaymentParams::RefundPaymentConfig))
         }
        attr_accessor :refund_payment_config
        # Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge.
        sig { returns(T.nilable(T::Boolean)) }
        attr_accessor :reverse_transfer
        sig {
          params(amount: T.nilable(Integer), charge: T.nilable(String), expand: T.nilable(T::Array[String]), metadata: T.nilable(T::Hash[String, String]), payment_intent: T.nilable(String), refund_application_fee: T.nilable(T::Boolean), refund_payment_config: T.nilable(::Stripe::Terminal::ReaderService::RefundPaymentParams::RefundPaymentConfig), reverse_transfer: T.nilable(T::Boolean)).void
         }
        def initialize(
          amount: nil,
          charge: nil,
          expand: nil,
          metadata: nil,
          payment_intent: nil,
          refund_application_fee: nil,
          refund_payment_config: nil,
          reverse_transfer: nil
        ); end
      end
      class SetReaderDisplayParams < Stripe::RequestParams
        class Cart < Stripe::RequestParams
          class LineItem < Stripe::RequestParams
            # The price of the item in cents.
            sig { returns(Integer) }
            attr_accessor :amount
            # The description or name of the item.
            sig { returns(String) }
            attr_accessor :description
            # The quantity of the line item being purchased.
            sig { returns(Integer) }
            attr_accessor :quantity
            sig { params(amount: Integer, description: String, quantity: Integer).void }
            def initialize(amount: nil, description: nil, quantity: nil); end
          end
          # Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
          sig { returns(String) }
          attr_accessor :currency
          # Array of line items that were purchased.
          sig {
            returns(T::Array[::Stripe::Terminal::ReaderService::SetReaderDisplayParams::Cart::LineItem])
           }
          attr_accessor :line_items
          # The amount of tax in cents.
          sig { returns(T.nilable(Integer)) }
          attr_accessor :tax
          # Total balance of cart due in cents.
          sig { returns(Integer) }
          attr_accessor :total
          sig {
            params(currency: String, line_items: T::Array[::Stripe::Terminal::ReaderService::SetReaderDisplayParams::Cart::LineItem], tax: T.nilable(Integer), total: Integer).void
           }
          def initialize(currency: nil, line_items: nil, tax: nil, total: nil); end
        end
        # Cart
        sig { returns(T.nilable(::Stripe::Terminal::ReaderService::SetReaderDisplayParams::Cart)) }
        attr_accessor :cart
        # Specifies which fields in the response should be expanded.
        sig { returns(T.nilable(T::Array[String])) }
        attr_accessor :expand
        # Type
        sig { returns(String) }
        attr_accessor :type
        sig {
          params(cart: T.nilable(::Stripe::Terminal::ReaderService::SetReaderDisplayParams::Cart), expand: T.nilable(T::Array[String]), type: String).void
         }
        def initialize(cart: nil, expand: nil, type: nil); end
      end
      # Cancels the current reader action.
      sig {
        params(reader: String, params: T.any(::Stripe::Terminal::ReaderService::CancelActionParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::Terminal::Reader)
       }
      def cancel_action(reader, params = {}, opts = {}); end

      # Creates a new Reader object.
      sig {
        params(params: T.any(::Stripe::Terminal::ReaderService::CreateParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::Terminal::Reader)
       }
      def create(params = {}, opts = {}); end

      # Deletes a Reader object.
      sig {
        params(reader: String, params: T.any(::Stripe::Terminal::ReaderService::DeleteParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::Terminal::Reader)
       }
      def delete(reader, params = {}, opts = {}); end

      # Returns a list of Reader objects.
      sig {
        params(params: T.any(::Stripe::Terminal::ReaderService::ListParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::ListObject)
       }
      def list(params = {}, opts = {}); end

      # Initiates a payment flow on a Reader.
      sig {
        params(reader: String, params: T.any(::Stripe::Terminal::ReaderService::ProcessPaymentIntentParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::Terminal::Reader)
       }
      def process_payment_intent(reader, params = {}, opts = {}); end

      # Initiates a setup intent flow on a Reader.
      sig {
        params(reader: String, params: T.any(::Stripe::Terminal::ReaderService::ProcessSetupIntentParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::Terminal::Reader)
       }
      def process_setup_intent(reader, params = {}, opts = {}); end

      # Initiates a refund on a Reader
      sig {
        params(reader: String, params: T.any(::Stripe::Terminal::ReaderService::RefundPaymentParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::Terminal::Reader)
       }
      def refund_payment(reader, params = {}, opts = {}); end

      # Retrieves a Reader object.
      sig {
        params(reader: String, params: T.any(::Stripe::Terminal::ReaderService::RetrieveParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::Terminal::Reader)
       }
      def retrieve(reader, params = {}, opts = {}); end

      # Sets reader display to show cart details.
      sig {
        params(reader: String, params: T.any(::Stripe::Terminal::ReaderService::SetReaderDisplayParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::Terminal::Reader)
       }
      def set_reader_display(reader, params = {}, opts = {}); end

      # Updates a Reader object by setting the values of the parameters passed. Any parameters not provided will be left unchanged.
      sig {
        params(reader: String, params: T.any(::Stripe::Terminal::ReaderService::UpdateParams, T::Hash[T.untyped, T.untyped]), opts: T.untyped).returns(Stripe::Terminal::Reader)
       }
      def update(reader, params = {}, opts = {}); end
    end
  end
end