# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `power_assert` gem.
# Please instead update this file by running `bin/tapioca gem power_assert`.

# source://power_assert//lib/power_assert/configuration.rb#1
module PowerAssert
  class << self
    # source://power_assert//lib/power_assert.rb#48
    def app_caller_locations; end

    # @return [Boolean]
    #
    # source://power_assert//lib/power_assert.rb#52
    def app_context?; end

    # source://power_assert//lib/power_assert/configuration.rb#3
    def configuration; end

    # @yield [configuration]
    #
    # source://power_assert//lib/power_assert/configuration.rb#7
    def configure; end

    # @yield [BlockContext.new(assertion_proc_or_source, assertion_method, source_binding)]
    #
    # source://power_assert//lib/power_assert.rb#30
    def start(assertion_proc_or_source, assertion_method: T.unsafe(nil), source_binding: T.unsafe(nil)); end

    # source://power_assert//lib/power_assert.rb#37
    def trace(frame); end

    private

    # source://power_assert//lib/power_assert.rb#82
    def clear_global_method_cache; end

    # @return [Boolean]
    #
    # source://power_assert//lib/power_assert.rb#59
    def internal_file?(file); end

    # source://power_assert//lib/power_assert.rb#74
    def lib_dir(obj, mid, depth); end

    # source://power_assert//lib/power_assert.rb#67
    def setup_internal_lib_dir(lib, mid, depth, lib_obj = T.unsafe(nil)); end
  end
end

# source://power_assert//lib/power_assert/context.rb#161
class PowerAssert::BlockContext < ::PowerAssert::Context
  # @return [BlockContext] a new instance of BlockContext
  #
  # source://power_assert//lib/power_assert/context.rb#162
  def initialize(assertion_proc_or_source, assertion_method, source_binding); end

  # source://power_assert//lib/power_assert/context.rb#188
  def yield; end

  private

  # source://power_assert//lib/power_assert/context.rb#195
  def invoke_yield; end
end

# source://power_assert//lib/power_assert/configuration.rb#12
class PowerAssert::Configuration < ::Struct
  # Sets the attribute colorize_message
  #
  # @param value [Object] the value to set the attribute colorize_message to.
  # @return [Object] the newly set value
  #
  # source://power_assert//lib/power_assert/configuration.rb#13
  def colorize_message=(bool); end

  # Sets the attribute inspector
  #
  # @param value [Object] the value to set the attribute inspector to.
  # @return [Object] the newly set value
  #
  # source://power_assert//lib/power_assert/configuration.rb#30
  def inspector=(inspector); end

  # Sets the attribute lazy_inspection
  #
  # @param value [Object] the value to set the attribute lazy_inspection to.
  # @return [Object] the newly set value
  #
  # source://power_assert//lib/power_assert/configuration.rb#23
  def lazy_inspection=(bool); end
end

# source://power_assert//lib/power_assert/context.rb#7
class PowerAssert::Context
  # @return [Context] a new instance of Context
  #
  # source://power_assert//lib/power_assert/context.rb#10
  def initialize(base_caller_length); end

  # source://power_assert//lib/power_assert/context.rb#43
  def message; end

  # source://power_assert//lib/power_assert/context.rb#48
  def message_proc; end

  private

  # source://power_assert//lib/power_assert/context.rb#58
  def build_assertion_message(parser, return_values); end

  # source://power_assert//lib/power_assert/context.rb#149
  def column2display_offset(str); end

  # source://power_assert//lib/power_assert/context.rb#104
  def detect_path(parser, return_values); end

  # source://power_assert//lib/power_assert/context.rb#138
  def encoding_safe_rstrip(str); end

  # source://power_assert//lib/power_assert/context.rb#134
  def enum_count_by(enum, &blk); end

  # source://power_assert//lib/power_assert/context.rb#124
  def find_all_identified_calls(return_values, path); end

  # @return [Boolean]
  #
  # source://power_assert//lib/power_assert/context.rb#54
  def fired?; end

  # source://power_assert//lib/power_assert/context.rb#119
  def uniq_calls(paths); end
end

# source://power_assert//lib/power_assert/context.rb#8
class PowerAssert::Context::Value < ::Struct
  # Returns the value of attribute column
  #
  # @return [Object] the current value of column
  def column; end

  # Sets the attribute column
  #
  # @param value [Object] the value to set the attribute column to.
  # @return [Object] the newly set value
  #
  # source://power_assert//lib/power_assert/context.rb#8
  def column=(_); end

  # Returns the value of attribute display_offset
  #
  # @return [Object] the current value of display_offset
  def display_offset; end

  # Sets the attribute display_offset
  #
  # @param value [Object] the value to set the attribute display_offset to.
  # @return [Object] the newly set value
  #
  # source://power_assert//lib/power_assert/context.rb#8
  def display_offset=(_); end

  # Returns the value of attribute lineno
  #
  # @return [Object] the current value of lineno
  def lineno; end

  # Sets the attribute lineno
  #
  # @param value [Object] the value to set the attribute lineno to.
  # @return [Object] the newly set value
  #
  # source://power_assert//lib/power_assert/context.rb#8
  def lineno=(_); end

  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  #
  # source://power_assert//lib/power_assert/context.rb#8
  def name=(_); end

  # Returns the value of attribute value
  #
  # @return [Object] the current value of value
  def value; end

  # Sets the attribute value
  #
  # @param value [Object] the value to set the attribute value to.
  # @return [Object] the newly set value
  #
  # source://power_assert//lib/power_assert/context.rb#8
  def value=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://power_assert//lib/power_assert.rb#88
module PowerAssert::Empty; end

# source://power_assert//lib/power_assert.rb#26
PowerAssert::INTERNAL_LIB_DIRS = T.let(T.unsafe(nil), Hash)

# source://power_assert//lib/power_assert/inspector.rb#8
class PowerAssert::InspectedValue
  # @return [InspectedValue] a new instance of InspectedValue
  #
  # source://power_assert//lib/power_assert/inspector.rb#9
  def initialize(value); end

  # source://power_assert//lib/power_assert/inspector.rb#13
  def inspect; end
end

# source://power_assert//lib/power_assert/inspector.rb#41
class PowerAssert::Inspector
  # @return [Inspector] a new instance of Inspector
  #
  # source://power_assert//lib/power_assert/inspector.rb#42
  def initialize(value, indent); end

  # source://power_assert//lib/power_assert/inspector.rb#47
  def inspect; end
end

# source://power_assert//lib/power_assert.rb#25
PowerAssert::POWER_ASSERT_LIB_DIR = T.let(T.unsafe(nil), String)

# source://power_assert//lib/power_assert/parser.rb#4
class PowerAssert::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://power_assert//lib/power_assert/parser.rb#9
  def initialize(line, path, lineno, binding, assertion_method_name = T.unsafe(nil), assertion_proc = T.unsafe(nil)); end

  # Returns the value of attribute binding.
  #
  # source://power_assert//lib/power_assert/parser.rb#7
  def binding; end

  # source://power_assert//lib/power_assert/parser.rb#24
  def call_paths; end

  # source://power_assert//lib/power_assert/parser.rb#20
  def idents; end

  # Returns the value of attribute line.
  #
  # source://power_assert//lib/power_assert/parser.rb#7
  def line; end

  # Returns the value of attribute lineno.
  #
  # source://power_assert//lib/power_assert/parser.rb#7
  def lineno; end

  # source://power_assert//lib/power_assert/parser.rb#28
  def method_id_set; end

  # Returns the value of attribute path.
  #
  # source://power_assert//lib/power_assert/parser.rb#7
  def path; end

  private

  # source://power_assert//lib/power_assert/parser.rb#221
  def collect_paths(idents, prefixes = T.unsafe(nil), index = T.unsafe(nil)); end

  # Returns idents as graph structure.
  #
  #                                                  +--c--b--+
  #  extract_idents(Ripper.sexp('a&.b(c).d')) #=> a--+        +--d
  #                                                  +--------+
  #
  # source://power_assert//lib/power_assert/parser.rb#70
  def extract_idents(sexp); end

  # source://power_assert//lib/power_assert/parser.rb#200
  def handle_columnless_ident(left_idents, mid, right_idents, with_safe_op = T.unsafe(nil)); end

  # source://power_assert//lib/power_assert/parser.rb#48
  def slice_expression(str); end

  # source://power_assert//lib/power_assert/parser.rb#184
  def str_indices(str, re, offset, limit); end

  # @return [Boolean]
  #
  # source://power_assert//lib/power_assert/parser.rb#35
  def valid_syntax?(str); end
end

# source://power_assert//lib/power_assert/parser.rb#61
PowerAssert::Parser::AND_OR_OPS = T.let(T.unsafe(nil), Array)

# source://power_assert//lib/power_assert/parser.rb#58
class PowerAssert::Parser::Branch < ::Array; end

# source://power_assert//lib/power_assert/parser.rb#248
PowerAssert::Parser::DUMMY = T.let(T.unsafe(nil), PowerAssert::Parser::DummyParser)

# source://power_assert//lib/power_assert/parser.rb#235
class PowerAssert::Parser::DummyParser < ::PowerAssert::Parser
  # @return [DummyParser] a new instance of DummyParser
  #
  # source://power_assert//lib/power_assert/parser.rb#236
  def initialize; end

  # source://power_assert//lib/power_assert/parser.rb#244
  def call_paths; end

  # source://power_assert//lib/power_assert/parser.rb#240
  def idents; end
end

# source://power_assert//lib/power_assert/parser.rb#5
class PowerAssert::Parser::Ident < ::Struct
  # Returns the value of attribute column
  #
  # @return [Object] the current value of column
  def column; end

  # Sets the attribute column
  #
  # @param value [Object] the value to set the attribute column to.
  # @return [Object] the newly set value
  #
  # source://power_assert//lib/power_assert/parser.rb#5
  def column=(_); end

  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  #
  # source://power_assert//lib/power_assert/parser.rb#5
  def name=(_); end

  # Returns the value of attribute type
  #
  # @return [Object] the current value of type
  def type; end

  # Sets the attribute type
  #
  # @param value [Object] the value to set the attribute type to.
  # @return [Object] the newly set value
  #
  # source://power_assert//lib/power_assert/parser.rb#5
  def type=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def members; end
    def new(*_arg0); end
  end
end

# source://power_assert//lib/power_assert/parser.rb#193
PowerAssert::Parser::MID2SRCTXT = T.let(T.unsafe(nil), Hash)

# source://power_assert//lib/power_assert/inspector.rb#19
class PowerAssert::SafeInspectable
  # @return [SafeInspectable] a new instance of SafeInspectable
  #
  # source://power_assert//lib/power_assert/inspector.rb#20
  def initialize(value); end

  # source://power_assert//lib/power_assert/inspector.rb#24
  def inspect; end
end

# source://power_assert//lib/power_assert/context.rb#205
class PowerAssert::TraceContext < ::PowerAssert::Context
  # @return [TraceContext] a new instance of TraceContext
  #
  # source://power_assert//lib/power_assert/context.rb#206
  def initialize(binding); end

  # source://power_assert//lib/power_assert/context.rb#224
  def disable; end

  # source://power_assert//lib/power_assert/context.rb#219
  def enable; end

  # @return [Boolean]
  #
  # source://power_assert//lib/power_assert/context.rb#228
  def enabled?; end
end

# source://power_assert//lib/power_assert/version.rb#2
PowerAssert::VERSION = T.let(T.unsafe(nil), String)
